//////////////////////////////////////////////////////////////////////////////
//
// Geoweb3d SDK
// Copyright (c) Geoweb3d, 2008-2021, all rights reserved.
//
// This code can be used only under the rights granted to you by the specific
// Geoweb3d SDK license under which the SDK provided.
//
//////////////////////////////////////////////////////////////////////////////
#pragma once

#include "../core/GW3DInterFace.h"
#include "../core/IGW3DDriver.h"
/*! Primary namespace */
namespace Geoweb3d
{
    extern "C++"
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>	Stereo driver. </summary>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        struct  GW3D_DLL IGW3DStereoDriver : public IGW3DDriver
        {
            virtual ~IGW3DStereoDriver() {};
            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Gets the name. </summary>
            ///
            /// <returns>	the name. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            virtual const char* get_Name() const = 0;

            virtual bool get_RequiresHardwareSupport() const = 0;
            virtual bool get_RequiresDisplayModeSupport() const = 0;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Gets the properties. </summary>
            ///
            /// <returns>	null if it fails, else the properties. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            virtual const IGW3DPropertyCollection* get_PropertyCollection() const = 0;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Gets the mode the sdk will use. </summary>
            ///
            /// <returns>	The display mode to use. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            virtual IGW3DDisplayModePtr get_DisplayModeToUse() const = 0;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Sets an elevation mode to use. </summary>
            ///
            /// <param name="mode">	The mode. </param>
            ///
            /// <returns>	true if it succeeds, false if it fails. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            virtual bool put_OverrideDisplayModeToUse(IGW3DDisplayModePtr mode) = 0;


            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	</summary>
            ///
            /// <remarks>	</remarks>
            ///
            /// <returns>	true if the system supports the current stero driver </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            virtual bool get_IsSystemSupported() const = 0;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	</summary>
            ///
            /// <remarks>	</remarks>
            ///
            /// <returns>	true if the required hardware is detectred. False if no hardware is found. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            virtual bool get_IsHardwareDetected() const = 0;

        };
    }
}



