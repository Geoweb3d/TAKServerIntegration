//////////////////////////////////////////////////////////////////////////////
//
// Geoweb3d SDK
// Copyright (c) Geoweb3d, 2008-2018, all rights reserved.
//
// This code can be used only under the rights granted to you by the specific
// Geoweb3d SDK license under which the SDK provided.
//
//////////////////////////////////////////////////////////////////////////////
#pragma once

#include "../core/GW3DInterFace.h"

namespace Geoweb3d
{

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A Feature Id Filter. </summary>
///
/// <remarks>	Feature Id Filter is a filter limiting which feature ids are being rendered. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

struct IGW3DFeatureIdFilter
{
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Values that represent how ids in the filter are being processed. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	enum FilterMode
	{
		/// <summary>  No filtering is applied </summary>
		NONE = 0,
		/// <summary>  Only listed ids are visbile </summary>
		INCLUSIVE,
		/// <summary>  Only listed ids are hidden </summary>
		EXCLUSIVE,
		/// <summary>  Filters out all ids </summary>
		ALL
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Destructor. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual ~IGW3DFeatureIdFilter()
	{}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the enabled state. </summary>
	///
	/// <returns>	true if filtering is enabled, false if filtering is disabled. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual bool get_Enabled() const = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Enables/disables . </summary>
	///
	/// <param name="enable">	true to enable filtering, false to disable filtering. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void put_Enabled( bool enable ) = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Get the current filtering mode. </summary>
	///
	/// <returns>	the active filter mode. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual FilterMode get_Mode() const = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the filtering mode. </summary>
	///
	/// <param name="mode">	The desired filtering mode. </param>
	/// <see cref="IGW3DFeatureIdFilter::FilterMode"/>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void put_Mode( FilterMode mode ) = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	removes all ids from the filter. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void clear() = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	adds the specified id to the filter </summary>
	///
	/// <param name="id">	the id to add. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void add_Id( long id ) = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	removes the the specified id from the filter </summary>
	///
	/// <param name="id">	the id to remove. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void remove_Id( long id ) = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Queries whether or not the specified id is being excluded (from rendering). </summary>
	///
	/// <param name="id">	the id to query. </param>
	///
	/// <returns>	true if the id is excluded from being rendered. False if the id is NOT excluded. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual bool get_IsFeatureExcluded( unsigned int id ) const = 0;
};

}
