//////////////////////////////////////////////////////////////////////////////
//
// Geoweb3d SDK
// Copyright (c) Geoweb3d, 2008-2021, all rights reserved.
//
// This code can be used only under the rights granted to you by the specific
// Geoweb3d SDK license under which the SDK provided.
//
//////////////////////////////////////////////////////////////////////////////

#pragma once

#include "../core/GW3DInterFace.h"
#include "IGW3DAnalysis.h"
#include "IGW3DPositionOrientation.h"

/*! Primary namespace */
namespace Geoweb3d
{
	extern "C++"
	{
		//////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	A Terrain Avoidance analysis. </summary>
		///
		/// <remarks>	</remarks>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		struct  GW3D_DLL IGW3DVisibilityDomeTest
			: public IGW3DAnalysis
			, public IGW3DPositionOrientation
		{
			virtual ~IGW3DVisibilityDomeTest() {}

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Enables/disables . </summary>
			///
			/// <remarks>	While disabled,  will not be visible </remarks>
			///
			/// <param name="enable">	true to enable, false to disable. </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual void put_Enabled(bool enable) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Gets the enabled state. </summary>
			///
			/// <returns>	true if enabled, false if disabled. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual bool get_Enabled() const = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Enables/disables Terrain Only. </summary>
			///
			/// <remarks>	While disabled, Visiblity Dome Analytic will be run on Terrain and Scene geometry. 
			///				Otherwise it will only be run on terrain. </remarks>
			///
			/// <param name="enable">	true to enable, false to disable. </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual void put_TerrainOnly(bool enable) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Gets the Terrain Only state. </summary>
			///
			/// <returns>	true if enabled, false if disabled. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual bool get_IsTerrainOnly() const = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Sets the inner radius. </summary>
			///
			/// <param name="radius">	The inner radius in meters. </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual void put_InnerRadius(float radius) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Gets the inner radius of the Visibility Dome. </summary>
			///
			/// <returns>	The inner radius in meters. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual float get_InnerRadius() const = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Sets the outer radius. </summary>
			///
			/// <param name="radius">	The outer radius in meters. </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual void  put_OuterRadius(float radius) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Gets the outer radius of the Visibility Dome. </summary>
			///
			/// <returns>	The outer radius in meters. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual float get_OuterRadius() const = 0;
		};
	}
}