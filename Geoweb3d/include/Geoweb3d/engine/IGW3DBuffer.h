//////////////////////////////////////////////////////////////////////////////
//
// Geoweb3d SDK
// Copyright (c) Geoweb3d, 2008-2012, all rights reserved.
//
// This code can be used only under the rights granted to you by the specific
// GeoWeb3d SDK license under which the SDK provided.
//
//////////////////////////////////////////////////////////////////////////////
#pragma once

#include "../core/GW3DInterFace.h"

/*! Primary namespace */
namespace Geoweb3d
{
////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A buffer </summary>
////////////////////////////////////////////////////////////////////////////////////////////////////

struct IGW3DBuffer
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the raw data. </summary>
    ///
    /// <returns>	null if it fails, else the data. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual const char* get_Data() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the raw data. </summary>
    ///
    /// <returns>	null if it fails, else the data. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual char* get_Data() = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the size of the buffer. </summary>
    ///
    /// <returns>	The size. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual unsigned get_Size() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the capacity of the buffer. </summary>
    ///
    /// <returns>	The capacity. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual unsigned get_Capacity() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Equality operator. </summary>
    ///
    /// <param name="buf">	The buffer. </param>
    ///
    /// <returns>	true if the parameters are considered equivalent. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual bool operator==(const IGW3DBuffer& buf) const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Inequality operator. </summary>
    ///
    /// <param name="buf">	The buffer. </param>
    ///
    /// <returns>	true if the parameters are not considered equivalent. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual bool operator!=(const IGW3DBuffer& buf) const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Sets the data in the buffer. </summary>
    ///
    /// <param name="data">	The data. </param>
    /// <param name="size">	The size. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void put_Data(const void* data, unsigned size) = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Appends data to a buffer. </summary>
    ///
    /// <param name="data">	The data. </param>
    /// <param name="size">	The size. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void append_Data(const void* data, unsigned size) = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Sets the size of the buffer. </summary>
    ///
    /// <param name="size">	The size. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void put_Size(unsigned size) = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Sets the capacity of the buffer. </summary>
    ///
    /// <param name="capacity">	The capacity. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void put_Capacity(unsigned capacity) = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Transfer the buffer to another buffer. </summary>
    ///
    /// <param name="buf">	[in] The buffer to which this buffer should be transferred. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void transfer_To(IGW3DBuffer* buf) = 0;
};
}