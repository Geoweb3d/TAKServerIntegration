//////////////////////////////////////////////////////////////////////////////
//
// Geoweb3d SDK
// Copyright (c) Geoweb3d, 2008-2018, all rights reserved.
//
// This code can be used only under the rights granted to you by the specific
// GeoWeb3d SDK license under which the SDK provided.
//
//////////////////////////////////////////////////////////////////////////////
#pragma once

#include "../core/GW3DInterFace.h"

/*! Primary namespace */
namespace Geoweb3d
{
////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	The globe's latitude longitude grid. </summary>
///
/// <remarks>	When enabled, the grid displays over the entire globe, giving a visual reference
/// 			for latitude/longitude lines and important latitudes and longitudes such as the
/// 			equator, prime meridian, etc. </remarks>
///
/// <see cref="IGW3DCamera::get_LatitudeLongitudeGrid"/>
////////////////////////////////////////////////////////////////////////////////////////////////////

struct IGW3DLatitudeLongitudeGrid
{
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the font for the grid labels. </summary>
	///
	/// <remarks>	Note, to modify the label fonts, clone the returned font and apply it using the
	/// 			put_Font function. </remarks>
	///
	/// <returns>	the font. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual const IGW3DFont *get_Font() const = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the label font. </summary>
	///
	/// <param name="font">	The font. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual const void put_Font(const IGW3DFontPtr &font ) = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Query if grid is enabled. </summary>
	///
	/// <returns>	true if enabled, false if disabled. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual bool get_Enabled() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Enable or disable the grid. </summary>
    ///
    /// <param name="enable">	true to enable, false to disable. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void put_Enabled(bool enable) = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets relative elevation offset of the grid lines. </summary>
	///
	/// <remarks>	An elevation offset helps prevent z-fighting. </remarks>
	///
	/// <returns>	The relative elevation offset. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual double get_RelativeElevationOffset() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Sets the relative elevation offset of the grid lines. </summary>
    ///
	/// <remarks>	An elevation offset helps prevent z-fighting. </remarks>
    ///
    /// <param name="offset">	The offset. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void put_RelativeElevationOffset(double offset ) = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the color of the tropic lines. </summary>
	///
	/// <param name="r">	Red. </param>
	/// <param name="g">	Green. </param>
	/// <param name="b">	Blue. </param>
	/// <param name="a">	(Optional) Alpha. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void put_TropicLineColor( float r, float g, float b, float a = 1.0) = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the color of the regular grid lines. </summary>
	///
	/// <param name="r">	Red. </param>
	/// <param name="g">	Green. </param>
	/// <param name="b">	Blue. </param>
	/// <param name="a">	(Optional) Alpha. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void put_GridLineColor( float r, float g, float b, float a = 1.0) = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Sets the color of the regular grid lines. </summary>
	///
	/// <param name="r">	Red. </param>
	/// <param name="g">	Green. </param>
	/// <param name="b">	Blue. </param>
	/// <param name="a">	(Optional) Alpha. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void put_EquatorLineColor( float r, float g, float b, float a = 1.0) = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the tropic line color. </summary>
	///
	/// <param name="r">	Red. </param>
	/// <param name="g">	Green. </param>
	/// <param name="b">	Blue. </param>
	/// <param name="a">	Alpha. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void get_TropicLineColor( float &r, float &g, float &b, float &a ) const = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the grid line color. </summary>
	///
	/// <param name="r">	Red. </param>
	/// <param name="g">	Green. </param>
	/// <param name="b">	Blue. </param>
	/// <param name="a">	Alpha. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void get_GridLineColor( float &r, float &g, float &b, float &a ) const = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the equator grid line color. </summary>
	///
	/// <param name="r">	Red. </param>
	/// <param name="g">	Green. </param>
	/// <param name="b">	Blue. </param>
	/// <param name="a">	Alpha. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void get_EquatorLineColor( float &r, float &g, float &b, float &a ) const = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Query if the geofencing grid is enabled. </summary>
	///
	/// <returns>	true if enabled, false if disabled. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual bool get_GeofenceGridEnabled() const = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Enable or disable the geofencing grid. </summary>
	///
	/// <param name="enable">	true to enable, false to disable. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void put_GeofenceGridEnabled(bool enable) = 0;

};
}