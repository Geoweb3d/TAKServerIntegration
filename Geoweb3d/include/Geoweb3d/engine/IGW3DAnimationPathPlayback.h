//////////////////////////////////////////////////////////////////////////////
//
// Geoweb3d SDK
// Copyright (c) Geoweb3d, 2008-2020, all rights reserved.
//
// This code can be used only under the rights granted to you by the specific
// Geoweb3d SDK license under which the SDK provided.
//
//////////////////////////////////////////////////////////////////////////////
#pragma once

#include "../core/GW3DInterFace.h"

/*! Primary namespace */
namespace Geoweb3d
{

	extern "C++"
	{

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	A playback interface to control an animation path that is attached to a camera. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		struct GW3D_DLL IGW3DAnimationPathPlayback
		{
		public:
			enum LoopMode
			{
				CONTINUOUS,
				ONE_SHOT
			};

			enum PlaybackMode
			{
				TIME = 0,
				FRAME
			};

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Sets the loop mode. </summary>
			///
			/// <param name="mode">	The loop mode. </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual void put_LoopMode(LoopMode mode) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Gets the loop mode. </summary>
			///
			/// <returns>	The loop mode. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual LoopMode get_LoopMode() const = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Sets the playback mode. </summary>
			///
			/// <param name="mode">	The playback mode. </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual void put_PlaybackMode(PlaybackMode mode) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Gets the playback mode. </summary>
			///
			/// <returns>	The playback mode. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual PlaybackMode get_PlaybackMode() const = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Begin path playback. </summary>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual void Play() = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Stop path playback. </summary>
			/// 
			/// <remarks>	playback position is maintained and can be resumed using the Play function.
			///   Use Scrub( 0.0 ) to reset plaback back to the beginning </remarks>
			/// 
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual void Stop() = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	fast-forwarding or reversing through the animation path to a particular location. </summary>
			///
			/// <param name="offset"> playback offset. 0.0 = beginning, 0.5 = middle, 1.0 = end </param>
			/// 
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual void Scrub(float offset) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Gets the current playback position. Range is [0.0, 1.0] </summary>
			///
			/// <returns>	The current playback position. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual float get_PlaybackPosition() const = 0;

		};

	}
}
