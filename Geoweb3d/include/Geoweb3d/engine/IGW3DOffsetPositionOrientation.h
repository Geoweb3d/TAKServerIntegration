//////////////////////////////////////////////////////////////////////////////
//
// Geoweb3d SDK
// Copyright (c) Geoweb3d, 2008-2019, all rights reserved.
//
// This code can be used only under the rights granted to you by the specific
// Geoweb3d SDK license under which the SDK provided.
//
//////////////////////////////////////////////////////////////////////////////

#pragma once

/*! Primary namespace */
namespace Geoweb3d
{

	struct GEOWEB3DENGINE_API IGW3DOffsetPositionOrientation
	{
		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Sets the location. </summary>
		///
		/// <param name="forward">	The forward offset. </param>
		/// <param name="up"> 	The up offset. </param>
		/// <param name="right"> 	The right offset. </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void put_Location(const double& forward, const double& up, const double& right) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets the location. </summary>
		///
		/// <param name="forward">	[out] The forward offset. </param>
		/// <param name="up"> 	[out] The up offset. </param>
		/// <param name="right"> 	[out] The right offset. </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void get_Location(double& forward, double& up, double& right) const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets the location. </summary>
		///
		/// <remarks>	get_Location will return then cartesian coordinate offset. </remarks>
		///
		/// <returns>	the location. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual  const GW3DPoint* get_Location() = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Sets the rotation. </summary>	
		///
		/// <param name="heading">	The heading. </param>
		/// <param name="pitch">  	The pitch. </param>
		/// <param name="roll">   	The roll. </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void put_Rotation(float heading, float pitch, float roll) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets the rotation. </summary>
		///
		/// <param name="heading">	[out] The heading. </param>
		/// <param name="pitch">  	[out] The pitch. </param>
		/// <param name="roll">   	[out] The roll. </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void get_Rotation(float& heading, float& pitch, float& roll) const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Sets the heading. </summary>
		///
		/// <param name="heading">	The heading. </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void put_Heading(float heading) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets the heading. </summary>
		///
		/// <returns>	The heading. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual float get_Heading() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Sets the pitch. </summary>
		///
		/// <param name="pitch">  	The pitch. </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void put_Pitch(float pitch) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets the pitch. </summary>
		///
		/// <returns>  	The pitch. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual float get_Pitch() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Sets the roll. </summary>
		///
		/// <param name="roll">   	The roll. </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void put_Roll(float roll) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets the roll. </summary>
		///
		/// <returns>   	The roll. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual float get_Roll() const = 0;
	};
}