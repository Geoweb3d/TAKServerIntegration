//////////////////////////////////////////////////////////////////////////////
//
// Geoweb3d SDK
// Copyright (c) Geoweb3d, 2008-2021, all rights reserved.
//
// This code can be used only under the rights granted to you by the specific
// Geoweb3d SDK license under which the SDK provided.
//
//////////////////////////////////////////////////////////////////////////////
#pragma once

/*! Primary namespace */
namespace Geoweb3d
{
	extern "C++"
	{
		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Configuration of the Geoweb3d Engine SDK at initialization. </summary>
		///
		/// <see cref="IGW3DGeoweb3dSDK::create_InitializationConfiguration"/>
		/// <see cref="IGW3DGeoweb3dSDK::InitializeLibrary"/>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		struct  IGW3DInitializationConfiguration
		{
			virtual ~IGW3DInitializationConfiguration() {}
			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Values that represent render driver types. </summary>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			enum RenderDriverType
			{
				/// <summary>	An enum constant representing the directx option (not yet supported). </summary>
				DIRECTX = 0,
				/// <summary>	An enum constant representing the opengl option. </summary>
				OPENGL = 1,
				/// <summary>	Do not use. </summary>
				RenderType_Max = 0xFF
			};

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Set the terrain linear LOD. </summary>
			///
			/// <remarks>	Default value is 4.0.  Higher values increase the terrain detail at greater
			///				distances. </remarks>
			///
			/// <param name="val">	The LOD. </param>
			///
			/// <returns>	GW3D_sOk if succeeded. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual GW3DResult put_TerrainLinearLOD(double& val) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Gets the terrain linear LOD. </summary>
			///
			/// <returns>	The terrain linear LOD. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual double get_TerrainLinearLOD() const = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Sets the terrain maximum LOD depth. </summary>
			///
			/// <remarks>	Default value is 18.  Higher values result in tighter terrain mesh post spacing
			///				when eye is near the terrain, since each LOD level has a smaller post spacing
			///				than the previous (lower) LOD.</remarks>
			///
			/// <param name="val">	The LOD (level of detail). </param>
			///
			/// <returns>	 GW3D_sOk if succeeded. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual GW3DResult put_TerrainMaxLODDepth(unsigned val) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Gets the terrain maximum LOD depth. </summary>
			///
			/// <remarks>	 </remarks>
			///
			/// <returns>	The terrain maximum LOD depth. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual unsigned get_TerrainMaxLODDepth() const = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Set the render driver type. </summary>
			///
			/// <remarks>	Currently only OpenGL is supported. </remarks>
			///
			/// <param name="val">	The driver type. </param>
			///
			/// <returns>	GW3D_sOk if succeeded. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual GW3DResult put_RenderDriverType(RenderDriverType val) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Gets the render driver type. </summary>
			///
			/// <returns>	The render driver type. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual RenderDriverType get_RenderDriverType() const = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Sets the minimum OpenGL render context version. </summary>
			///
			/// <param name="major_version">	The major version. </param>
			/// <param name="minor_version">	The minor version. </param>
			///
			/// <returns>	GW3D_sOk if succeeded. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual GW3DResult put_MinRenderContextVersion(unsigned major_version, unsigned minor_version) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Gets the minimum OpenGL render context version. </summary>
			///
			/// <param name="major_version">	[out] The major version. </param>
			/// <param name="minor_version">	[out] The minor version. </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual void get_MinRenderContextVersion(unsigned& major_version, unsigned& minor_version) const = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Allow a newer rendering context. </summary>s>
			///
			/// <param name="val">	true to allow. </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual void put_AllowNewerRenderingContext(bool val) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Check if a newer rendering context is allowed. </summary>
			///
			/// <returns>	true if allowed, false if not. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual bool get_AllowNewerRenderingContext() const = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Sets whether to check out an Esri license. </summary>
			///
			/// <remarks>	Set to false to prevent Geoweb3d from checking for an Esri license. This prevents
			/// 			a floating license from being checked out, for example.  The extended Esri
			/// 			capabilities (such as file geodatabase, ArcSDE, etc) will not be available.
			/// 			 </remarks>
			///
			/// <param name="val">	true to allow. </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual void put_ESRILicenseCheckout(bool val) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Check if Esri license checkout is enabled. </summary>
			///
			/// <returns>	true if enabled, false if disabled. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual bool get_ESRILicenseCheckout() const = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Sets whether to display onscreen performance statitics by default. </summary>
			///
			/// <remarks>	If enabled, this will display onscreen statistics by default, which are useful
			///				for debugging application performance.  These may also be toggled on and off by
			///				pressing the 'Insert' key. </remarks>
			///
			/// <param name="val">	true to allow. </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual void put_EnableStatsByDefault(bool val) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Check if onscreen statistics are displayed by default. </summary>
			///
			/// <returns>	true if enabled, false if disabled. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual bool get_EnableStatsByDefault() const = 0;


			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Sets the maximum texture size for 3D models. </summary>
			///
			/// <param name="size">	The size in pixels. </param>
			///
			/// <returns>	GW3D_sOk if succeeded. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual GW3DResult	put_3DModel_MaxTextureClamp(unsigned size) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Gets the maximum texture size for 3D models. </summary>
			///
			/// <returns>	The maximum texture size in pixels. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual unsigned	get_3DModel_MaxTextureClamp() const = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Sets the 3D model to display in case of an error. </summary>
			///
			/// <remarks>	Sets what 3D model should be displayed in place of a model if an error occurs
			/// 			during model loading. </remarks>
			///
			/// <param name="filename">	Filename of the file. </param>
			///
			/// <returns>	GW3D_sOk if succeeded. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual GW3DResult	put_3DModel_ErrorModel(const char* filename) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Gets the error model. </summary>
			///
			/// <returns>	the error model. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual const char* get_3DModel_ErrorModel() const = 0;


			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Sets the 3D model to display in case of a missing model. </summary>
			///
			/// <remarks>	Sets what 3D model should be displayed in place of a model if the file could not
			/// 			be found at the specified path during model loading. </remarks>
			///
			/// <param name="filename">	Filename of the file. </param>
			///
			/// <returns>	GW3D_sOk if succeeded. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual GW3DResult	put_3DModel_MissingModel(const char* filename) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Gets the missing model. </summary>
			///
			/// <returns>	the missing model. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual const char* get_3DModel_MissingModel() const = 0;

		};
	}
}