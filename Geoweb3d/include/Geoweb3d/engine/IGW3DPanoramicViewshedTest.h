//////////////////////////////////////////////////////////////////////////////
//
// Geoweb3d SDK
// Copyright (c) Geoweb3d, 2008-2016, all rights reserved.
//
// This code can be used only under the rights granted to you by the specific
// Geoweb3d SDK license under which the SDK provided.
//
//////////////////////////////////////////////////////////////////////////////

#pragma once

#include "IGW3DViewshedTest.h"

/*! Primary namespace */
namespace Geoweb3d
{
	extern "C++"
	{
		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	A Panoramic viewshed analysis. </summary>
		///
		/// <remarks>	The Geoweb3d viewshed provides a visual display of surfaces that are visible and/or
		/// 			non-visible from a defined position, orientation and field of view. The display of
		/// 			viewshed is divided into two regions: the visible and the hidden region.  The
		/// 			visible region represents all terrain and geometry surfaces that are visible from
		/// 			the viewshed origin, whereas the hidden region represents all terrain and
		/// 			geometry surfaces that are not visible from the viewshed origin. </remarks>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		struct  IGW3DPanoramicViewshedTest : public IGW3DViewshedTest
		{
			virtual ~IGW3DPanoramicViewshedTest() {}
			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Gets the horizontal swing angle for the viewshed.	 </summary>
			///
			/// <returns>	 </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual double get_HorizontalAngle() const = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Sets the horizontal swing angle for the viewshed.  </summary>
			///
			/// <returns>	This value may effect the number of component viewsheds that are created in 
			///				order to maintain certain quality standards. </returns>
			///
			/// <param name="hang">	Angle 0 - 360 </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual GW3DResult put_HorizontalAngle(const double& hang) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Gets the horizontal swing angle for the viewshed.	 </summary>
			///
			/// <returns>	 </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual double get_VerticalAngle() const = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Sets the horizontal swing angle for the viewshed.	 </summary>
			///
			/// <returns>	This value may effect the number of component viewsheds that are created in 
			///				order to maintain certain quality standards. </returns>
			///
			/// <param name="vang">	Angle 0.001 - 120 </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual GW3DResult put_VerticalAngle(const double& vang) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Gets the inner radius for the viewshed. </summary>
			///
			/// <returns>	 </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual double get_InnerRadius() const = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Sets the inner radius for the viewshed.	 </summary>
			///
			/// <remarks>	 </remarks>
			///
			/// <param name="inRad"> </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual GW3DResult put_InnerRadius(const double& inRad) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Gets the outer radius for the viewshed.	 </summary>
			///
			/// <returns>	 </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual double get_OuterRadius() const = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Sets the outerradius for the viewshed.	 </summary>
			///
			/// <remarks>	 </remarks>
			///
			/// <param name="outRad"> </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual GW3DResult put_OuterRadius(const double& outRad) = 0;
		};
	}
}
