//////////////////////////////////////////////////////////////////////////////
//
// Geoweb3d SDK
// Copyright (c) Geoweb3d, 2008-2020, all rights reserved.
//
// This code can be used only under the rights granted to you by the specific
// Geoweb3d SDK license under which the SDK provided.
//
//////////////////////////////////////////////////////////////////////////////
#pragma once

#include "../core/GW3DInterFace.h"
#include "../core/IGW3DCollection.h"
#include "../../Geoweb3dCore/Geoweb3dTypes.h"

namespace Geoweb3d
{
	extern "C++"
	{
		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Collection of Raster layers. </summary>
		///
		/// <remarks>	Geoweb3d, 3/23/2020. </remarks>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		struct  GW3D_DLL IGW3DRasterLayerCollection : public IGW3DCollection< IGW3DRasterLayerWPtr >
		{
			virtual ~IGW3DRasterLayerCollection() {}

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Array indexer operator. </summary>
			///
			/// <param name="index">	Zero-based index of the Raster layer. </param>
			///
			/// <returns>	The indexed value. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual const IGW3DRasterLayerWPtr operator[](unsigned long index) const = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Gets at index. </summary>
			///
			/// <param name="index">	Zero-based index of the Raster layer. </param>
			///
			/// <returns>	at index. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual const IGW3DRasterLayerWPtr get_AtIndex(unsigned long index) const = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Destroys the given layer. </summary>
			///
			/// <param name="layer">	The layer to destroy. </param>
			///
			/// <returns>	GW3D_sOk if succeeded. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual  GW3DResult destroy(IGW3DRasterLayerWPtr layer) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Gets a layer by name. </summary>
			///
			/// <param name="name">	The name. </param>
			///
			/// <returns>	The layer, or an expired pointer if no layer matches the given name. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual IGW3DRasterLayerWPtr get_ByName(const char* name) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Gets the Raster data source. </summary>
			///
			/// <remarks>	Gets the Raster datasource this layer collection belongs to. </remarks>
			///
			/// <returns>	The Raster data source. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual IGW3DRasterDataSourceWPtr get_RasterDataSource() = 0;
		};
	}
}