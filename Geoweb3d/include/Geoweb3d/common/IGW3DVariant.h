//////////////////////////////////////////////////////////////////////////////
//
// Geoweb3d SDK
// Copyright (c) Geoweb3d, 2008-2021, all rights reserved.
//
// This code can be used only under the rights granted to you by the specific
// Geoweb3d SDK license under which the SDK provided.
//
//////////////////////////////////////////////////////////////////////////////
#pragma once

#include "../core/GW3DInterFace.h"

/*! Primary namespace */
namespace Geoweb3d
{
    struct GW3DVariantImpl;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	A variant. </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    extern "C++"
    {
        class GW3D_DLL IGW3DVariant
        {
        public:

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Default constructor. </summary>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            IGW3DVariant();

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Destructor. </summary>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            ~IGW3DVariant();

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Constructor. </summary>
            ///
            /// <param name="n">	The int value. </param>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            IGW3DVariant(int n);

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Constructor. </summary>
            ///
            /// <param name="n">	The int64 value. </param>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            IGW3DVariant(int64_t n);

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Constructor. </summary>
            ///
            /// <param name="n">	The double value. </param>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            IGW3DVariant(double n);

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Constructor. </summary>
            ///
            /// <param name="b">	The boolean value. </param>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            IGW3DVariant(bool b);

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Constructor. </summary>
            ///
            /// <param name="s">	The const char* value. </param>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            IGW3DVariant(const char* s);

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Copy constructor. </summary>
            ///
            /// <param name="v">	The value. </param>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            IGW3DVariant(const IGW3DVariant& v);

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Assignment operator. </summary>
            ///
            /// <param name="n">	The int value. </param>
            ///
            /// <returns>	A shallow copy of this object. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            IGW3DVariant& operator = (int n);

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Assignment operator. </summary>
            ///
            /// <param name="n">	The int64 value. </param>
            ///
            /// <returns>	A shallow copy of this object. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            IGW3DVariant& operator = (int64_t n);

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Assignment operator. </summary>
            ///
            /// <param name="n">	The double value. </param>
            ///
            /// <returns>	A shallow copy of this object. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            IGW3DVariant& operator = (double n);

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Assignment operator. </summary
            ///
            /// <param name="n">	The boolean value. </param>
            ///
            /// <returns>	A shallow copy of this object. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            IGW3DVariant& operator = (bool n);

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Assignment operator. </summary>
            ///
            /// <param name="s">	The const char* value. </param>
            ///
            /// <returns>	A shallow copy of this object. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            IGW3DVariant& operator = (const char* s);

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Assignment operator. </summary>
            ///
            /// <param name="v">	The value. </param>
            ///
            /// <returns>	A shallow copy of this object. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            IGW3DVariant& operator = (const IGW3DVariant& v);

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Assignment operator. </summary>
            ///
            /// <param name="v">	The value. </param>
            ///
            /// <returns>	A shallow copy of this object. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            IGW3DVariant& operator = (const IGW3DVariant* v);


            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	resets the variant. </summary>
            ///
            /// <remarks>	This is for cases where you want to clear the internal type as well as remove any
            ///				data this this variant holds</remarks>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            void reset_to_null();

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Converts this object to a double. </summary>
            ///
            /// <remarks>	Get the value as a double.  If the internal type is not a double, the value will be 
            ///				converted to a double. If it cannot be converted, 0.0 will be returned. </remarks>
            ///
            /// <returns>	This object as a double. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            double to_double() const;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Converts this object to an int. </summary>
            ///
            /// <remarks>	Get the value as a int.  If the internal type is not a int, the value will be 
            ///				converted to a int. If it cannot be converted, 0 will be returned.</remarks>
            ///
            /// <returns>	This object as an int. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            int to_int() const;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Converts this object to an int. </summary>
            ///
            /// <remarks>	Get the value as a int.  If the internal type is not a int, the value will be 
            ///				converted to a int. If it cannot be converted, 0 will be returned.</remarks>
            ///
            /// <returns>	This object as an int. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            int64_t to_int64() const;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Converts this object to an bool. </summary>
            ///
            /// <remarks>	Get the value as a bool.  If the internal type is not a bool, the value will be 
            ///				converted to a bool. If it cannot be converted, false will be returned.</remarks>
            ///
            /// <returns>	This object as a bool. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            bool to_bool() const;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Converts this object to a IGW3DStringPtr object. </summary>
            ///
            /// <remarks>	Get the value as a string.  If the internal type is not a string, the value will be 
            ///				converted to a string. If it cannot be converted, a null string will be returned. 
            ///				
            ///				Note: a boolean value is converted to "1" or "0". </remarks>
            ///
            /// <returns>	ret gets filled in as an IGW3DStringPtr. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            void to_string(IGW3DStringPtr& ret) const;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Gets the raw string. </summary>
            ///
            /// <remarks>	This will not convert type and is only for performance reasons when you know the
            /// 			internal type is already stored as as string. </remarks>
            ///
            /// <returns>	null if it fails, else the raw string. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            const char* raw_string() const;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Converts this variant to a string type. </summary>
            ///
            /// <remarks>	This is for cases where you want the internal type as a string if its not already
            /// 			a string type. </remarks>
            ///
            /// <returns>	true if it succeeds, false if it fails. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            bool convert_to_string();

            ///////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Set whether operators should auto-convert non-alike variant types. </summary>
            ///
            ///	<remarks>	Default behavior is to not allow auto convert, so if two variants are not the 
            ///				same type, such as "1.0" (a string) and 1.0 (a double) would return false on 
            ///				an == operator, as they are not the same type.  Thus, if you set this to true, 
            ///				the input will get converted to the same type, then do an == compare. 
            ///
            ///				NOTE NOTE NOTE!!! as of 4/30/2014, only == operators pay attention to this
            ///				Should be hooked up to the others once final approval. </remarks>
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            void put_EnableAutoConvertForOperators(bool enable = false);

            ///////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Get whether operators will auto-convert non-alike variant types. </summary>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            bool get_EnableAutoConvertForOperators();

            /////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Equality operator. </summary>
            ///
            /// <param name="n">	The int to process. </param>
            ///
            /// <returns>	true if the parameters are considered equivalent. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            bool operator == (int n) const;

            /////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Equality operator. </summary>
            ///
            /// <param name="n">	The int64 to process. </param>
            ///
            /// <returns>	true if the parameters are considered equivalent. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            bool operator == (int64_t n) const;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Equality operator. </summary>
            ///
            /// <param name="n">	The double to process. </param>
            ///
            /// <returns>	true if the parameters are considered equivalent. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            bool operator == (double n) const;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Equality operator. </summary>
            ///
            /// <param name="parameter1">	The boolean to process. </param>
            ///
            /// <returns>	true if the parameters are considered equivalent. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef SWIGGING
            bool operator == (bool) const;
#endif
            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Equality operator. </summary>
            ///
            /// <param name="s">	The const char* to process. </param>
            ///
            /// <returns>	true if the parameters are considered equivalent. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            bool operator == (const char* s) const;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Equality operator. </summary>
            ///
            /// <param name="v">	The variant to process. </param>
            ///
            /// <returns>	true if the parameters are considered equivalent. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            bool operator == (const IGW3DVariant& v) const;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Inequality operator. </summary>
            ///
            /// <param name="n">	The int to process. </param>
            ///
            /// <returns>	true if the parameters are not considered equivalent. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            bool operator != (int n) const;


            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Inequality operator. </summary>
            ///
            /// <param name="n">	The int64 to process. </param>
            ///
            /// <returns>	true if the parameters are not considered equivalent. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            bool operator != (int64_t n) const;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Inequality operator. </summary>
            ///
            /// <param name="n">	The double to process. </param>
            ///
            /// <returns>	true if the parameters are not considered equivalent. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            bool operator != (double n) const;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Inequality operator./ </summary>
            ///
            /// <param name="parameter1">	The boolean to process. </param>
            ///
            /// <returns>	true if the parameters are not considered equivalent. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            bool operator != (bool) const;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Inequality operator. </summary>
            ///
            /// <param name="s">	The const char* to process. </param>
            ///
            /// <returns>	true if the parameters are not considered equivalent. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            bool operator != (const char* s) const;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Inequality operator./ </summary>
            ///
            /// <param name="v">	The const variant to process. </param>
            ///
            /// <returns>	true if the parameters are not considered equivalent. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            bool operator != (const IGW3DVariant& v) const;

            bool operator < (int n) const;
            bool operator < (int64_t n) const;
            bool operator < (double n) const;
#ifndef SWIGGING
            bool operator < (bool) const;
#endif
            bool operator < (const char* s) const;
            bool operator < (const IGW3DVariant& v) const;

            bool operator <= (int n) const;
            bool operator <= (int64_t n) const;
            bool operator <= (double n) const;
#ifndef SWIGGING
            bool operator <= (bool) const;
#endif
            bool operator <= (const char* s) const;
            bool operator <= (const IGW3DVariant& v) const;


            bool operator > (int n) const;
            bool operator > (int64_t n) const;
            bool operator > (double n) const;
#ifndef SWIGGING
            bool operator > (bool) const;
#endif
            bool operator > (const char* s) const;
            bool operator > (const IGW3DVariant& v) const;


            bool operator >= (int n) const;
            bool operator >= (int64_t n) const;
            bool operator >= (double n) const;
#ifndef SWIGGING
            bool operator >= (const bool) const;
#endif
            bool operator >= (const char* s) const;
            bool operator >= (const IGW3DVariant& v) const;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	int casting operator. </summary>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            operator int() const;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	int casting operator. </summary>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            operator int64_t() const;


            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	double casting operator. </summary>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            operator double() const;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	double casting operator. Internal storage is a double, this is just a helper. </summary>
            ////////////////////////////////////////////////////////////////////////////////////////////////////
            operator float()  const;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	IGW3DStringPtr casting operator. </summary>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            operator IGW3DStringPtr() const;


            operator const IGW3DColorPtr() const;
            operator IGW3DColorPtr();


            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	bool casting operator. </summary>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            operator bool() const;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	int casting operator. </summary>
            ///
            /// <returns>	The result of the operation. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            IGW3DVariant& operator () (int n);

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	int64 casting operator. </summary>
            ///
            /// <returns>	The result of the operation. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            IGW3DVariant& operator () (int64_t n);

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	double casting operator. </summary>
            ///
            /// <returns>	The result of the operation. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            IGW3DVariant& operator () (double n);

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	bool casting operator. </summary>
            ///
            /// <returns>	The result of the operation. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            IGW3DVariant& operator () (bool b);

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	char* casting operator. </summary>
            ///
            /// <returns>	The result of the operation. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            IGW3DVariant& operator () (const char* s);

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	IGW3DVariant casting operator. </summary>
            ///
            /// <returns>	The result of the operation. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            IGW3DVariant& operator () (const IGW3DVariant& v);

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Query if this object is null. </summary>
            ///
            /// <returns>	true if null, false if not. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            bool is_null() const;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Query if this IGW3DVariant is int. </summary>
            ///
            /// <returns>	true if int, false if not. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            bool is_int() const;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Query if this IGW3DVariant is int. </summary>
            ///
            /// <returns>	true if int64, false if not. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////
            bool is_int64() const;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Query if this IGW3DVariant is double. </summary>
            ///
            /// <returns>	true if double, false if not. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            bool is_double() const;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Query if this IGW3DVariant is numeric. </summary>
            ///
            /// <returns>	true if numeric, false if not. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            bool is_numeric() const;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Query if this IGW3DVariant is string. </summary>
            ///
            /// <returns>	true if string, false if not. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            bool is_string() const;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Query if this IGW3DVariant is bool. </summary>
            ///
            /// <returns>	true if bool, false if not. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            bool is_bool() const;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Query if this IGW3DVariant is bool. </summary>
            ///
            /// <returns>	true if bool, false if not. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            bool is_color() const;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Gets the type as a string. </summary>
            ///
            /// <returns>	null if it fails, else the type. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            const char* type() const;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Gets the hash value. </summary>
            ///
            /// <returns>	The hash value. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            int64_t get_HashValue() const;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Values that represent var_type_t. </summary>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            enum var_type_t
            {
                /// <summary>	An enum constant representing the type null option. </summary>
                type_null,
                /// <summary>	An enum constant representing the type int option. </summary>
                type_int,
                /// <summary>	An enum constant representing the type int 64 option. </summary>
                type_int64,
                /// <summary>	An enum constant representing the type bool option. </summary>
                type_bool,
                /// <summary>	An enum constant representing the type double option. </summary>
                type_double,
                /// <summary>	An enum constant representing the type string option. </summary>
                type_string,
                /// <summary>	An enum constant representing the type color option. </summary>
                type_color,
                /// <summary>	Do Not Use. </summary>
                TYPE_MAX = 0x7FFFFFFF

            };

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Gets the type as enum value. </summary>
            ///
            /// <returns>	The variant type. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            var_type_t  type_byEnum() const;

        private:
            /// <summary>	The variant implementation. </summary>
            friend GW3DVariantImpl;
            /// <summary>	The pimpl. </summary>
            GW3DVariantImpl* pimpl_;
        };
    }
}
