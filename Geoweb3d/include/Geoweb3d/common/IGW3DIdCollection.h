//////////////////////////////////////////////////////////////////////////////
//
// Geoweb3d SDK
// Copyright (c) Geoweb3d, 2008-2021, all rights reserved.
//
// This code can be used only under the rights granted to you by the specific
// Geoweb3d SDK license under which the SDK provided.
//
//////////////////////////////////////////////////////////////////////////////
#pragma once

#include "../core/GW3DInterFace.h"
#include "../core/IGW3DConstCollection.h"

/*! Primary namespace */
namespace Geoweb3d
{
    extern "C++" 
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>	Description of a property. </summary>
        ///
        /// <remarks>	The full description of a property or attribute field. </remarks>
        ////////////////////////////////////////////////////////////////////////////////////////////////////


        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>	Collection of definitions. </summary>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        struct GW3D_DLL IGW3DIdCollection : public IGW3DConstCollection< long >
        {
            virtual ~IGW3DIdCollection() {}
            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Equality operator. </summary>
            ///
            /// <param name="s">	The const IGW3DDefinitionCollection * to process. </param>
            ///
            /// <returns>	true if the parameters are considered equivalent. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            virtual bool operator == (const IGW3DIdCollection* s) const = 0;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Equality operator. </summary>
            ///
            /// <param name="s">	The const IGW3DDefinitionCollectionPtr to process. </param>
            ///
            /// <returns>	true if the parameters are considered equivalent. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            virtual bool operator == (const IGW3DIdCollectionPtr s) const = 0;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Adds an id. </summary>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            virtual void add_Id(long id) = 0;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Removes an id. </summary>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            virtual void remove_Id(long id) = 0;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary> Gets whether or not the given id is found in the container </summary>
            /// <returns> true if the id is found otherwise false </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            virtual bool contains_Id(long id) const = 0;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Gets the current hash. </summary>
            ///
            /// <returns>	The current hash. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            virtual int64_t get_CurrentHash() const = 0;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary>	Creates a definition collection. </summary>
            ///
            /// <remarks>	Usage: IGW3DDefinitionCollection::create() </remarks>
            ///
            /// <param name="interface_version">	(optional) the interface version. </param>
            ///
            /// <returns>	A new definition collection. </returns>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            static IGW3DIdCollectionPtr create(unsigned interface_version = GEOWEB3D_INTERFACE_VERSION);
        };

    }
}