//////////////////////////////////////////////////////////////////////////////
//
// Geoweb3d SDK
// Copyright (c) Geoweb3d, 2008-2017, all rights reserved.
//
// This code can be used only under the rights granted to you by the specific
// Geoweb3d SDK license under which the SDK provided.
//
//////////////////////////////////////////////////////////////////////////////
#pragma once

#include "../core/GW3DInterFace.h"
/*! Primary namespace */
namespace Geoweb3d
{
	extern "C++"
	{
		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	A Color. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		struct GW3D_DLL IGW3DColor
		{
			virtual ~IGW3DColor() {}
			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Equality operator. </summary>
			///
			/// <param name="other">	The other. </param>
			///
			/// <returns>	true if the parameters are considered equivalent. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual bool operator==(const IGW3DColor& other) const = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Inequality operator. </summary>
			///
			/// <param name="other">	The other. </param>
			///
			/// <returns>	true if the parameters are not considered equivalent. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual bool operator!=(const IGW3DColor& other) const = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Sets the red component of the color. </summary>
			///
			/// <param name="red">	The red value. </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual void put_Red(float red) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Sets the green component of the color. </summary>
			///
			/// <param name="green">	The green value. </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual void put_Green(float green) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Sets the blue component of the color. </summary>
			///
			/// <param name="blue">	The blue value. </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual void put_Blue(float blue) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Sets the alpha component of the color. </summary>
			///
			/// <param name="alpha">	The alpha value. </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual void put_Alpha(float alpha) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Gets the red component of the color. </summary>
			///
			/// <returns>	The red component. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual float get_Red() const = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Gets the green component of the color. </summary>
			///
			/// <returns>	The green component. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual float get_Green() const = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Gets the blue component of the color. </summary>
			///
			/// <returns>	The blue component. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual float get_Blue() const = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Gets the alpha component of the color. </summary>
			///
			/// <returns>	The alpha component. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual float get_Alpha() const = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Set all components of the color. </summary>
			///
			/// <param name="red">	The red value. </param>
			/// <param name="green">	The green value. </param>
			/// <param name="blue">	The blue value. </param>
			/// <param name="alpha">	The alpha value. </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual void put_RGBA(float red, float green, float blue, float alpha) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Gets all components of the color. </summary>
			///
			/// <param name="red">	The red value. </param>
			/// <param name="green">	The green value. </param>
			/// <param name="blue">	The blue value. </param>
			/// <param name="alpha">	The alpha value. </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual void get_RGBA(float& red, float& green, float& blue, float& alpha) = 0;
		};
	}
}