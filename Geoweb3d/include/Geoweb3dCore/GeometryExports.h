//////////////////////////////////////////////////////////////////////////////
//
// Geoweb3d SDK
// Copyright (c) Geoweb3d, 2008-2018, all rights reserved.
//
// This code can be used only under the rights granted to you by the specific
// Geoweb3d SDK license under which the SDK provided.
//
//////////////////////////////////////////////////////////////////////////////

#pragma once

/**
* @file GeometryExports.h
*
* Geometry Classes
*/
#include "Geoweb3dTypes.h"
#include "Geoweb3dExports.h"
#include "../Geoweb3d/core/GW3DInterFace.h"

/*! Primary namespace */
namespace Geoweb3d
{

class GW3DPolygon;
class GW3DMultiPoint;
class GW3DMultiLineString;
class GW3DMultiPolygon;
class GW3DCurve;
class GW3DCompoundCurve;
class GW3DCurvePolygon;
class GW3DMultiCurve;
class GW3DBaseImpl;
class GW3DPointImpl;
class GW3DPolygonImpl;
class GW3DLineStringImpl;
class GW3DLinearRingImpl;
class GW3DMultiPolygonImpl;
class GW3DMultiPointImpl;
class GW3DMultiLineStringImpl;
class GW3DSphereImpl;
class GW3DRayImpl;
class GW3DCurveImpl;
class GW3DCompoundCurveImpl;

typedef int     GW3DBoolean;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	An envelope. </summary>
///
/// <remarks>	An envelope is a simple container for a bounding area. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class GEOWEB3DENGINE_API GW3DEnvelope
{
public:

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Default constructor. </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    GW3DEnvelope();

	bool operator==(const GW3DEnvelope &p) const
	{
		//note, to make a robust compare, probably should
		//use a tolerance
    
		if(MinX !=p.MinX)
			return false;

		if(MaxX !=p.MaxX)
			return false;

		if(MinY !=p.MinY)
			return false;

		if(MaxY !=p.MaxY)
			return false;

		if(MinZ !=p.MinZ)
			return false;

		if(MaxZ !=p.MaxZ)
			return false;

		return true;
	}

	GW3DEnvelope& operator=(GW3DEnvelope const& rhs)
	{
		MinX = rhs.MinX;
		MaxX = rhs.MaxX;
		MinY = rhs.MinY;
		MaxY = rhs.MaxY;
		MinZ = rhs.MinZ;
		MaxZ = rhs.MaxZ;

		return *this;
	}

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Checks if the envelope is null. </summary>
    ///
    /// <remarks>	An envelope is null if all its edges are at 0.0.  This is the envelope's default 
    /// 			state on construction, therefore if an envelope has never been set, it is null. 
    /// 			</remarks>
    ///
    /// <returns>	true if null, false if not null. </returns>
    /// 
	/// <see cref="reset"/>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    bool get_IsNull() const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Merges a coordinate into the envelope. </summary>
    ///
    /// <remarks>	Expands the existing envelope dimensions to include the coordinate provided. 
    /// 			</remarks>
    ///
    /// <param name="dfX">	The x coordinate. </param>
    /// <param name="dfY">	The y coordinate. </param>
    /// <param name="dfZ">	The z coordinate. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void merge( double dfX, double dfY, double dfZ );

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Merges another envelope. </summary>
    ///
    /// <remarks>	Expands to existing envelope dimensions to completely include the dimensions of 
    /// 			sOther. If this envelope is null, it will be set to the exact dimenions of sOther.
    /// 			</remarks>
    ///
    /// <param name="sOther">	The other envelope. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void merge( GW3DEnvelope const& sOther );

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Intersects another envelope. </summary>
    ///
    /// <remarks>	Reduces the existing envelope dimensions to only include the area or volume shared 
	/// 			both envelopes (i.e. where they overlap). If this envelope is null, it will be set 
	/// 			to the exact dimenions of sOther.</remarks>
    ///
    /// <param name="sOther">	The other. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void intersect( GW3DEnvelope const& sOther );

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Query if this envelope intersects the given other. </summary>
    ///
    /// <param name="other">	The other. </param>
    ///
    /// <returns>	true if it succeeds, false if it fails. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    bool intersects(GW3DEnvelope const& other) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Query if this envelope contains the given other. </summary>
    ///
    /// <param name="other">	Tests the envelope to determine if the other envelope is completely 
    /// 						contained by this envelope. </param>
    ///
    /// <returns>	true if the other envelope is contained by this envelope, false if not. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    bool contains(GW3DEnvelope const& other) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Sets the dimensions of the envelope. </summary>
    ///
    /// <param name="MinX">	The minimum x coordinate. </param>
    /// <param name="MaxX">	The maximum x coordinate. </param>
    /// <param name="MinY">	The minimum y coordinate. </param>
    /// <param name="MaxY">	The maximum y coordinate. </param>
    /// <param name="MinZ">	The minimum z coordinate. </param>
    /// <param name="MaxZ">	The maximum z coordinate. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void put(
        const double &MinX, const double &MaxX,
        const double &MinY, const double &MaxY,
        const double &MinZ, const double &MaxZ);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Resets this envelope to null. </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void reset();
    /// <summary>	The minimum x coordinate. </summary>
    double      MinX;
    /// <summary>	The maximum x coordinate. </summary>
    double      MaxX;
    /// <summary>	The minimum y coordinate. </summary>
    double      MinY;
    /// <summary>	The maximum y coordinate. </summary>
    double      MaxY;
    /// <summary>	The minimum z coordinate. </summary>
    double      MinZ;
    /// <summary>	The maximum z coordinate. </summary>
    double      MaxZ;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	The geometry visitor virtual baseclass. </summary>
///
/// <remarks>	This is the pure virtual base class for easy access to the underlying geometry type
/// 			 </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////
class GEOWEB3DENGINE_API IGW3DGeometryVisitor
{
public:
	// Visit GW3DPoint. 
	virtual void visit(GW3DPoint*) = 0;
	// Visit GW3DLineString. 
	virtual void visit(GW3DLineString*) = 0;
	// Visit GW3DLinearRing. 
	virtual void visit(GW3DLinearRing*) = 0;
	// Visit GW3DPolygon. 
	virtual void visit(GW3DPolygon*) = 0;
	// Visit GW3DMultiPoint. 
	virtual void visit(GW3DMultiPoint*) = 0;
	// Visit GW3DMultiLineString. 
	virtual void visit(GW3DMultiLineString*) = 0;
	// Visit GW3DMultiPolygon. 
	virtual void visit(GW3DMultiPolygon*) = 0;
	/// Visit GW3DGeometryCollection. 
	//virtual void visit(GW3DGeometryCollection*) = 0;
	// Visit GW3DCircularString. 
	//virtual void visit(GW3DCircularString*) = 0;
	// Visit GW3DCompoundCurve. 
	//virtual void visit(GW3DCompoundCurve*) = 0;
	// Visit GW3DCurvePolygon. 
	//virtual void visit(GW3DCurvePolygon*) = 0;
	// Visit GW3DMultiCurve. 
	//virtual void visit(GW3DMultiCurve*) = 0;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	The const geometry visitor virtual baseclass. </summary>
///
/// <remarks>	This is the pure virtual base class for easy access to the underlying geometry type
/// 			 </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////
class GEOWEB3DENGINE_API IGW3DConstGeometryVisitor
{
public:
	// Visit GW3DPoint. 
	virtual void visit(const GW3DPoint*) = 0;
	// Visit GW3DLineString. 
	virtual void visit(const GW3DLineString*) = 0;
	// Visit GW3DLinearRing. 
	virtual void visit(const GW3DLinearRing*) = 0;
	// Visit GW3DPolygon. 
	virtual void visit(const GW3DPolygon*) = 0;
	// Visit GW3DMultiPoint. 
	virtual void visit(const GW3DMultiPoint*) = 0;
	// Visit GW3DMultiLineString. 
	virtual void visit(const GW3DMultiLineString*) = 0;
	// Visit GW3DMultiPolygon. 
	virtual void visit(const GW3DMultiPolygon*) = 0;
	/// Visit GW3DGeometryCollection. 
	//virtual void visit(const GW3DGeometryCollection*) = 0;
	// Visit GW3DCircularString. 
	//virtual void visit(const GW3DCircularString*) = 0;
	// Visit GW3DCompoundCurve. 
	//virtual void visit(const GW3DCompoundCurve*) = 0;
	// Visit GW3DCurvePolygon. 
	//virtual void visit(const GW3DCurvePolygon*) = 0;
	// Visit GW3DMultiCurve. 
	//virtual void visit(const GW3DMultiCurve*) = 0;
	// Visit GW3DMultiSurface. 
	//virtual void visit(const GW3DMultiSurface*) = 0;
	// Visit GW3DTriangle. 
	//virtual void visit(const GW3DTriangle*) = 0;
	// Visit GW3DPolyhedralSurface. 
	//virtual void visit(const GW3DPolyhedralSurface*) = 0;
	// Visit GW3DTriangulatedSurface. 
	//virtual void visit(const GW3DTriangulatedSurface*) = 0;
};
////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	The geometry base class. </summary>
///
/// <remarks>	This is the base class for all geometry objects (not including GW3DEnvelope).
/// 			 </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class GEOWEB3DENGINE_API GW3DGeometry
{
public:

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Default constructor. </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    GW3DGeometry() {};

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Destructor. </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual     ~GW3DGeometry() {};

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Object allocation operator. </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void* operator new(size_t);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Object de-allocation operator. </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void operator delete(void*);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the dimension of the geometry. </summary>
    ///
    /// <remarks>	Returns the inherent dimension of the geometry (0 for points, 1 for lines, 2 for 
    /// 			polygons). </remarks>
    ///
    /// <returns>	The dimension. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual int get_Dimension() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Query if the geometry is empty. </summary>
    ///
    /// <remarks>	Normally this returns false, except when an object is instantiated and geometry has 
    /// 			not been assigned </remarks>
    ///
    /// <returns>	True if there is no geometry, false if not. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual GW3DBoolean  get_IsEmpty() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Makes a deep copy of this object. </summary>
    ///
	/// <remarks>	Note: The returned object should be deleted when no longer needed, to prevent memory 
	/// 			leak. </remarks>
    ///
    /// <returns>	A copy of this object. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual GW3DGeometry* clone() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the geometry type. </summary>
    ///
    /// <returns>	The geometry type. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual GeometryType get_GeometryType() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the envelope of the geometry. </summary>
    ///
    /// <remarks>	Computes and returns the bounding envelope for this geometry. </remarks>
    ///
    /// <param name="psEnvelope">	An envelope to be set to this geometry's envelope. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void get_Envelope( GW3DEnvelope * psEnvelope ) const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Query if this object is valid. </summary>
    ///
    /// <returns>	true if valid, false if not. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual bool get_IsValid() const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the coordinate dimension. </summary>
    ///
    /// <remarks>	Gets the dimension of the coordinates in this geometry. Returns 2 for 2D or 3 for 
    /// 			3D, or 0 for an empty point geometry.</remarks>
    ///
    /// <returns>	The coordinate dimension. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual int get_CoordinateDimension() const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Query if this object intersects the given other. </summary>
    ///
    /// <param name="other">	The other. </param>
    ///
    /// <returns>	true if the geometries intersect, otherwise false. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual bool intersects(const GW3DGeometry * other ) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Tests if this geometry is considered equal to another. </summary>
    ///
    /// <param name="other">	The geometry to compare to this object. </param>
    ///
    /// <returns>	true if the objects are considered equal, false if they are not. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual bool equals(	 const GW3DGeometry * other ) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Query if this object and the given other are disjoint. </summary>
    ///
    /// <param name="other">	The other. </param>
    ///
    /// <returns>	true if disjoint, false if not. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual bool disjoint(	 const GW3DGeometry * other ) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Query if this object and the given other are touching. </summary>
    ///
    /// <param name="other">	The other. </param>
    ///
    /// <returns>	true if touching, false if not. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual bool touches(	 const GW3DGeometry * other ) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Query if this object and the given other are crossing. </summary>
    ///
    /// <param name="other">	The other. </param>
    ///
    /// <returns>	true if crossing, false if not. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual bool crosses(	 const GW3DGeometry * other ) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Query if this object is within the given other. </summary>
    ///
    /// <param name="other">	The other. </param>
    ///
    /// <returns>	true if within the other, false if not. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual bool within(	 const GW3DGeometry * other ) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Query if this object contains the given other. </summary>
    ///
    /// <param name="other">	Tests if the other geometry is completely contained by this geometry.  
    /// 						</param>
    ///
    /// <returns>	true if the object contains the other, false if not. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual bool contains(	 const GW3DGeometry * other ) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Query if this object overlaps the given other. </summary>
    ///
    /// <param name="other">	The other. </param>
    ///
    /// <returns>	true if overlapping, false if not. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual bool  overlaps(	 const GW3DGeometry * other ) const;

//SKIP-CODE-BEGIN

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	boundry of this object. </summary>
    ///
	/// <remarks>	Note: The returned object should be deleted when no longer needed, to prevent memory 
	/// 			leak. </remarks>
    ///
    /// <returns>	null return if failed. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

   // virtual GW3DGeometry *boundary() const;

//SKIP-CODE-END

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Compute distance between two geometries. </summary>
    ///
    /// <remarks>	Returns the shortest distance between the two geometries. The distance is expressed 
    /// 			in the same unit as the coordinates of the geometries. To calculate the distance
    /// 			between two points in meters, consider using get_DistanceInMeters.</remarks>
    ///
    /// <param name="other">	The other. </param>
    ///
    /// <returns>	The distance. </returns>
    /// 
	/// <see cref="get_DistanceInMeters"/>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual double distance( const GW3DGeometry * other ) const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	accept the visitor </summary>
	///
	/// <param name="IGW3DGeometryVisitor">	</param>
	///
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void accept(IGW3DGeometryVisitor* visitor) = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	accept the const visitor </summary>
	///
	/// <param name="IGW3DGeometryVisitor">	</param>
	///
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void accept(IGW3DConstGeometryVisitor* visitor) const = 0;


	// has a Z component. 
	bool  is_3D() const;
	//has a M component.
	bool  is_Measured() const;

	//SKIP-CODE-BEGIN

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	convex hull of this object. </summary>
    ///
	/// <remarks>	Note: The returned object should be deleted when no longer needed, to prevent memory 
	/// 			leak. </remarks>
    ///
    /// <returns>	null return if failed. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

   // virtual GW3DGeometry *convex_hull() const;
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	buffer region of this object. </summary>
    ///
	/// <remarks>	Note: The returned object should be deleted when no longer needed, to prevent memory 
	/// 			leak. </remarks>
    ///
    /// <returns>	null return if failed. </returns>
    //////////////////////////////////////////////////////////////////////////////////////////////////
    
	//virtual GW3DGeometry *buffer_region( const double &distance, int quadsegments = 30 ) const;
  
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	intersection of this object. </summary>
    ///
	/// <remarks>	Note: The returned object should be deleted when no longer needed, to prevent memory 
	/// 			leak. </remarks>
    ///
    /// <returns>	null return if failed. </returns>
    //////////////////////////////////////////////////////////////////////////////////////////////////
   
	//virtual GW3DGeometry *intersection( const GW3DGeometry *) const;
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	onvexhull of this object. </summary>
    ///
	/// <remarks>	Note: The returned object should be deleted when no longer needed, to prevent memory 
	/// 			leak. </remarks>
    ///
    /// <returns>	null return if failed. </returns>
    //////////////////////////////////////////////////////////////////////////////////////////////////
   
	//virtual GW3DGeometry *union_geometry( const GW3DGeometry * ) const;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	onvexhull of this object. </summary>
    ///
	/// <remarks>	Note: The returned object should be deleted when no longer needed, to prevent memory 
	/// 			leak. </remarks>
    ///
    /// <returns>	null return if failed. </returns>
    //////////////////////////////////////////////////////////////////////////////////////////////////
   
	//virtual GW3DGeometry *union_cascaded() const;
   
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	onvexhull of this object. </summary>
    ///
	/// <remarks>	Note: The returned object should be deleted when no longer needed, to prevent memory 
	/// 			leak. </remarks>
    ///
    /// <returns>	null return if failed. </returns>
    //////////////////////////////////////////////////////////////////////////////////////////////////
  
	//virtual GW3DGeometry *difference( const GW3DGeometry * ) const;
   
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	onvexhull of this object. </summary>
    ///
	/// <remarks>	Note: The returned object should be deleted when no longer needed, to prevent memory 
	/// 			leak. </remarks>
    ///
    /// <returns>	null return if failed. </returns>
    //////////////////////////////////////////////////////////////////////////////////////////////////
   	
	//virtual GW3DGeometry *sym_difference( const GW3DGeometry * ) const;
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	centroid of this object. </summary>
    ///
	/// <remarks>	Note: The returned object should be deleted when no longer needed, to prevent memory 
	/// 			leak. </remarks>
    ///
    /// <returns>	null return if failed. </returns>
    //////////////////////////////////////////////////////////////////////////////////////////////////
   
	//virtual GW3DResult    centroid( GW3DPoint &poPoint ) const;
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	simplify of this object. </summary>
    ///
	/// <remarks>	Note: The returned object should be deleted when no longer needed, to prevent memory 
	/// 			leak. </remarks>
    ///
    /// <returns>	null return if failed. </returns>
    //////////////////////////////////////////////////////////////////////////////////////////////////
   
	//virtual GW3DGeometry *simplify(const double &tolerance) const;
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	simplify_preserve_topology of this object. </summary>
    ///
	/// <remarks>	Note: The returned object should be deleted when no longer needed, to prevent memory 
	/// 			leak. </remarks>
    ///
    /// <returns>	null return if failed. </returns>
    //////////////////////////////////////////////////////////////////////////////////////////////////
 
	//virtual GW3DGeometry *simplify_preserve_topology(const double &tolerance) const;
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	polygonize of this object. </summary>
    ///
	/// <remarks>	Note: The returned object should be deleted when no longer needed, to prevent memory 
	/// 			leak. </remarks>
    ///
    /// <returns>	null return if failed. </returns>
    //////////////////////////////////////////////////////////////////////////////////////////////////
    
	//virtual GW3DGeometry *polygonize() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	import from a well known binary source. </summary>
    ///
	/// <param name="binary_buffer"> the raw well known binary buffer. </param>
	/// <param name="size"> the size of the well known binary buffer. </param>
	///
	/// <returns>	GW3D_sOk if succeeded. </returns>
	//////////////////////////////////////////////////////////////////////////////////////////////////

    virtual GW3DResult import_FromWkb(const unsigned char *binary_bin, int size);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	import from a well known text source. </summary>
	///
	/// <param name="text_buffer"> the raw well known text buffer. </param>
	///
	/// <returns>	GW3D_sOk if succeeded. </returns>
	//////////////////////////////////////////////////////////////////////////////////////////////////

	virtual GW3DResult import_FromWkt(const char ** text_buffer);

 //SKIP-CODE-END

    //internal use only.  Do not use.
    virtual const GW3DBaseImpl* getBaseImpl( ) const = 0;
	//internal use only.  Do not use.
    virtual GW3DBaseImpl* getBaseImpl( ) = 0;
private:

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Copy constructor. </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    GW3DGeometry( const GW3DGeometry& rhs );

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Assignment operator. </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    GW3DGeometry& operator=( const GW3DGeometry& rhs );
};


////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A curve, abastract base for GW3DLineString and GW3DCompoundCurve. </summary>
////////////////////////////////////////////////////////////////////////////////////////////////////

class GEOWEB3DENGINE_API GW3DCurve : public GW3DGeometry
{
protected:
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Default constructor not allowed. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	GW3DCurve() {};
};

class GEOWEB3DENGINE_API GW3DSimpleCurve : public GW3DCurve
{

};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A point. </summary>
////////////////////////////////////////////////////////////////////////////////////////////////////

class GEOWEB3DENGINE_API GW3DPoint : public GW3DGeometry
{
public:

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Default constructor. </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    GW3DPoint();

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Copy constructor. </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    GW3DPoint( const GW3DPoint& rhs );

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Assignment operator. </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    GW3DPoint& operator=( const GW3DPoint& rhs );

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Constructor. </summary>
    ///
    /// <param name="x">	The x coordinate. </param>
    /// <param name="y">	The y coordinate. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    GW3DPoint( double x, double y );

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Constructor. </summary>
    ///
    /// <param name="x">	The x coordinate. </param>
    /// <param name="y">	The y coordinate. </param>
    /// <param name="z">	The z coordinate. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    GW3DPoint( double x, double y, double z );

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Destructor. </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual     ~GW3DPoint();

	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the dimension of the geometry. </summary>
    ///
    /// <remarks>	Returns the inherent dimension of the geometry (0 for points). </remarks>
    ///
    /// <returns>	The dimension. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual int get_Dimension() const override;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the envelope of the geometry. </summary>
    ///
    /// <remarks>	Computes and returns the bounding envelope for this geometry. </remarks>
    ///
    /// <param name="psEnvelope">	An envelope to be set to this geometry's envelope. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void get_Envelope( GW3DEnvelope * psEnvelope ) const override;

	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Empties this geometry. </summary>
    ///
    /// <remarks>	Clear geometry information. This restores the geometry to it's initial state after 
    /// 			construction, and before assignment of actual geometry. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void empty();
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Query if the geometry is empty. </summary>
    ///
    /// <remarks>	Normally this returns false, except when an object is instantiated and geometry has 
    /// 			not been assigned </remarks>
    ///
    /// <returns>	True if there is no geometry, false if not. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual GW3DBoolean  get_IsEmpty() const override;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Get x coordinate. </summary>
    ///
    /// <returns>	The x coordinate. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    double      get_X() const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Get y coordinate. </summary>
    ///
    /// <returns>	The y coordinate. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    double      get_Y() const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Get z coordinate. </summary>
    ///
    /// <returns>	The z coordinate. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    double      get_Z() const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Get xyz coordinate. </summary>
    ///
    /// <returns>	fills in.  Z will be 0 if not 3 dimensions . </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
	void get_XYZ( double *x, double *y, double *z) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Sets the coordinate dimension. </summary>
    ///
    /// <remarks>	Sets the coordinate dimension of the geometry (2 or 3).  If coordinate dimension is 
    /// 			set to 2, all existing z values will be set to 0</remarks>
    ///
    /// <param name="nDimension">	The dimension. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void put_CoordinateDimension( int nDimension );

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Sets the x coordinate. </summary>
    ///
    /// <param name="xIn">	The x coordinate. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void        put_X( double xIn );

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Sets the y coordinate. </summary>
    ///
    /// <param name="yIn">	The y coordinate. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void        put_Y( double yIn );

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Sets the z coordinate. </summary>
    ///
    /// <param name="zIn">	The z coordinate. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void		put_Z( double zIn );

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets distance in meters. </summary>
    ///
    /// <remarks>	Given two geographic coordinates (longitude/latitude in degrees), return the 
    /// 			geodesic arc distance in meters.  The WGS84 spheroid is used. if use_z is set to 
    /// 			true yet CoordinateDimension is not 3, results will  be calculated but a 
    /// 			GW3D_sAmbiguousArgument will be returned. </remarks>
    ///
    /// <param name="p2">	 	The second GW3DPoint. </param>
    /// <param name="use_z"> 	true to use z coordinate in the calculation. </param>
    /// <param name="result">	[in,out] The result. </param>
    ///
    /// <returns>	GW3D_sOk if succeeded. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    GW3DResult get_DistanceInMeters( const GW3DPoint *p2, bool use_z, double &result) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the geometry type. </summary>
    ///
    /// <returns>	The geometry type. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual GeometryType get_GeometryType() const override;

	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Makes a deep copy of this object. </summary>
    ///
	/// <remarks>	Note: The returned object should be deleted wen no longer needed, to prevent memory 
	/// 			leak. </remarks>
    ///
    /// <returns>	A copy of this object. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual GW3DGeometry* clone() const override;

	// Accept a visitor. 
	virtual void accept(IGW3DGeometryVisitor* visitor)  override
	{ 
		visitor->visit(this); 
	}

	// Accept a visitor. 
	virtual void accept(IGW3DConstGeometryVisitor* visitor) const  override 
	{ 
		visitor->visit(this); 
	}

    //internal use only, do not use.
    const GW3DBaseImpl* getBaseImpl( ) const override;
	//internal use only, do not use.
    virtual GW3DBaseImpl* getBaseImpl( ) override;
private:

    friend class GW3DPolygon;
    friend class GW3DLineString;
    friend class GW3DLinearRing;
    GW3DPointImpl* pimpl_;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A line string. </summary>
////////////////////////////////////////////////////////////////////////////////////////////////////

class GEOWEB3DENGINE_API GW3DLineString  : public GW3DGeometry
{
public:

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Default constructor. </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    GW3DLineString();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Copy constructor. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	GW3DLineString(const GW3DLineString& rhs);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Assignment operator. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	GW3DLineString& operator=(const GW3DLineString& rhs);

    virtual     ~GW3DLineString();

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the dimension of the geometry. </summary>
    ///
    /// <remarks>	Returns the inherent dimension of the geometry (1 for lines). </remarks>
    ///
    /// <returns>	The dimension. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual int get_Dimension() const override;

	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the envelope of the geometry. </summary>
    ///
    /// <remarks>	Computes and returns the bounding envelope for this geometry. </remarks>
    ///
    /// <param name="psEnvelope">	An envelope to be set to this geometry's envelope. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void get_Envelope( GW3DEnvelope * psEnvelope ) const override;
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the geometry type. </summary>
    ///
    /// <returns>	The geometry type. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual GeometryType get_GeometryType() const override;
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Query if the geometry is empty. </summary>
    ///
    /// <remarks>	Normally this returns false, except when an object is instantiated and geometry has 
    /// 			not been assigned </remarks>
    ///
    /// <returns>	True if there is no geometry, false if not. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual GW3DBoolean  get_IsEmpty() const override;
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Segmentizes the geometry. </summary>
    ///
    /// <remarks>	Modify the geometry such it has no segment longer than the max length. The distance 
    /// 			is expressed in the same unit as the coordinates of the geometry.</remarks>
    ///
    /// <param name="dfMaxLength">	The maximum distance between any 2 vertices after segmentization.
    /// 							 </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void segmentize(double dfMaxLength);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the length. </summary>
    ///
    /// <remarks>	Gets the length of the geometry, expressed in the same unit as the coordinates of 
    /// 			the geometry. </remarks>
    ///
    /// <returns>	The length. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual double get_Length() const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the start point. </summary>
    ///
	/// <remarks>	Gets the point at the start (index 0) of the geometry. </remarks>
    ///
    /// <param name="point">	The point to be assigned the start point. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void get_StartPoint(GW3DPoint *point ) const;
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the end point. </summary>
    ///
	/// <remarks>	Gets the point at the end of the geometry. </remarks>
    ///
    /// <param name="point">	The point to be assigned the end point. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void get_EndPoint(GW3DPoint *point ) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the point at a given distance along the line string. </summary>
    ///
    /// <param name="distance">	The distance along the curve at which to sample position, in the same 
    /// 						unit as the	coordinates of the geometry. </param>
    /// <param name="point">		The point to be assigned the position at the given distance. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void get_Value( double distance, GW3DPoint *point ) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets a point in the line string. </summary>
    ///
    /// <remarks>	Get the point in the line string at the given index. This should always be greater 
    /// 			than or equal to 0 and less than the value returned by getNumPoints. </remarks>
    ///
    /// <param name="i">	Zero-based index of the point to retrieve. </param>
    /// <param name="point">	The point to be assigned the point at the given index. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void get_Point( int i, GW3DPoint *point ) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Sets the coordinate dimension. </summary>
    ///
    /// <remarks>	Sets the coordinate dimension of the geometry (2 or 3).  If coordinate dimension is 
    /// 			set to 2, all existing z values will be set to 0</remarks>
    ///
    /// <param name="nDimension">	The dimension. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void put_CoordinateDimension( int nDimension );

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Sets the number of points the line string is to contain. </summary>
    ///
    /// <remarks>	Sets the number of points for the line string, creating null points or removing 
    /// 			points as neccessary. Use in conjunction with put_Point.</remarks>
    ///
    /// <param name="num">	The number of points. </param>
    /// 
	/// <see cref="put_Point"/>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void put_NumPoints( int num );

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the number of points in the line string. </summary>
    ///
    /// <returns>	The number of points. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    int get_NumPoints() const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Set the location of a vertex in line string. </summary>
    /// 
	/// <remarks>	If the index given is larger than the number of necessary the number of existing 
	/// 			points in the line string, the point count will be increased to accomodate the 
	/// 			request. </remarks>
    ///
    /// <param name="index">	Zero-based index of the vertex to assign. </param>
    /// <param name="point">	The value to assign to the vertex. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void        put_Point( int index, GW3DPoint *point );

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Set the location of a vertex in line string. </summary>
    ///
    /// <remarks>	If the index given is larger than the number of necessary the number of existing
    /// 			points in the line string, the point count will be increased to accomodate the
    ///				request. </remarks>
    ///
    /// <param name="index">	Zero-based index of the vertex to assign. </param>
    /// <param name="x">		The x coordinate. </param>
    /// <param name="y">		The y coordinate. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void        put_Point( int index , double x, double y);
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Set the location of a vertex in line string. </summary>
    ///
    /// <remarks>	If the index given is larger than the number of necessary the number of existing
    /// 			points in the line string, the point count will be increased to accomodate the
    /// 			request. </remarks>
    ///
    /// <param name="index">	Zero-based index of the vertex to assign. </param>
    /// <param name="x">		The x coordinate. </param>
    /// <param name="y">		The y coordinate. </param>
    /// <param name="z">		The z coordinate. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void        put_Point( int index, double x, double y, double z );

    ////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Assign all points in a line string. </summary>
    ///
    /// <remarks>	This method clears any existing points assigned to this line string, and assigns a 
    /// 			whole new set. </remarks>
    ///
    /// <param name="nPointsIn">	The number of points being passed in padfX and padfY. </param>
    /// <param name="padfX">	 	List of x coordinates of points being assigned. </param>
    /// <param name="padfY">	 	List of y coordinates of points being assigned. </param>
    /// <param name="padfZ">	 	(optional) List of z coordinates of points being assigned. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void        put_Points( int nPointsIn, double * padfX, double * padfY, double *padfZ = 0 );
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Adds a point to the line string. </summary>
    ///
    /// <remarks>	The vertex count of the line string is increased by one, and assigned from the 
    /// 			passed location value. </remarks>
    ///
    /// <param name="point">	The point to assign to the new vertex. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void        add_Point( GW3DPoint * point);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Adds a point to the line string. </summary>
    ///
    /// <remarks>	The vertex count of the line string is increased by one, and assigned from the
    /// 			passed location value. </remarks>
    ///
    /// <param name="x">	The x coordinate. </param>
    /// <param name="y">	The y coordinate. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void        add_Point( double x, double y);
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Adds a point to the line string. </summary>
    ///
    /// <remarks>	The vertex count of the line string is increased by one, and assigned from the
    /// 			passed location value. </remarks>
    ///
    /// <param name="x">	The x coordinate. </param>
    /// <param name="y">	The y coordinate. </param>
    /// <param name="z">	The z coordinate. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void        add_Point( double x, double y, double z);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Get the x coordinate of a vertex. </summary>
    ///
    /// <param name="i">	Zero-based index of the vertex. </param>
    ///
    /// <returns>	The x coordinate. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    double get_X( int i ) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Get the y coordinate of a vertex. </summary>
    ///
    /// <param name="i">	Zero-based index of the vertex. </param>
    ///
    /// <returns>	The y coordinate. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    double get_Y( int i ) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Get the z coordinate of a vertex. </summary>
    ///
    /// <param name="i">	Zero-based index of the vertex. </param>
    ///
    /// <returns>	The z coordinate. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    double get_Z( int i ) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Empties this geometry. </summary>
    ///
    /// <remarks>	Clear geometry information. This restores the geometry to it's initial state after 
    /// 			construction, and before assignment of actual geometry. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void empty();
   
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Makes a deep copy of this object. </summary>
    ///
	/// <remarks>	Note: The returned object should be deleted wen no longer needed, to prevent memory 
	/// 			leak. </remarks>
    ///
    /// <returns>	A copy of this object. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual GW3DGeometry* clone() const override;
	// Accept a visitor. 
	virtual void accept(IGW3DGeometryVisitor* visitor)  override
	{
		visitor->visit(this);
	}

	// Accept a visitor. 
	virtual void accept(IGW3DConstGeometryVisitor* visitor) const  override
	{
		visitor->visit(this);
	}
    //internal use only, do not use.
    const GW3DBaseImpl* getBaseImpl( ) const override;
    //internal use only, do not use.
    virtual GW3DBaseImpl* getBaseImpl( ) override;
private:
    friend class GW3DLinearRing;
    GW3DLineStringImpl* pimpl_;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A concrete representation of a closed ring. </summary>
///
/// <remarks>	This class is functionally equivelent to an GW3DLineString, but has a separate 
/// 			identity to maintain alignment with the OpenGIS simple feature data model.  It 
/// 			exists to serve as a component of an GW3DPolygon. Because GW3DLinearRing is not 
/// 			a "proper" free standing simple features object, it cannot be directly used on a 
/// 			feature via SetGeometry() </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class GEOWEB3DENGINE_API GW3DLinearRing  : public GW3DGeometry
{
public:

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Default constructor. </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    GW3DLinearRing();

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Copy constructor. </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    GW3DLinearRing( GW3DLinearRing * );


	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Copy constructor. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	GW3DLinearRing(const GW3DLinearRing& rhs);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Assignment operator. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	GW3DLinearRing& operator=(const GW3DLinearRing& rhs);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Destructor. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual ~GW3DLinearRing();

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the geometry type. </summary>
    ///
    /// <returns>	The geometry type. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    GeometryType get_GeometryType() const override;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the dimension of the geometry. </summary>
    ///
    /// <remarks>	Returns the inherent dimension of the geometry. </remarks>
    ///
    /// <returns>	The dimension. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual int get_Dimension() const override;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the envelope of the geometry. </summary>
    ///
    /// <remarks>	Computes and returns the bounding envelope for this geometry. </remarks>
    ///
    /// <param name="psEnvelope">	An envelope to be set to this geometry's envelope. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void get_Envelope( GW3DEnvelope * psEnvelope ) const override;
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Query if the geometry is empty. </summary>
    ///
    /// <remarks>	Normally this returns false, except when an object is instantiated and geometry has 
    /// 			not been assigned </remarks>
    ///
    /// <returns>	True if there is no geometry, false if not. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual GW3DBoolean  get_IsEmpty() const override;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Segmentizes the geometry. </summary>
    ///
    /// <remarks>	Modify the geometry such it has no segment longer than the max length. The distance 
    /// 			is expressed in the same unit as the coordinates of the geometry.</remarks>
    ///
    /// <param name="dfMaxLength">	The maximum distance between any 2 vertices after segmentization.
    /// 							 </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void segmentize(double dfMaxLength);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the length. </summary>
    ///
    /// <remarks>	Gets the length of the geometry, expressed in the same unit as the coordinates of 
    /// 			the geometry. </remarks>
    ///
    /// <returns>	The length. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual double get_Length() const;
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the start point. </summary>
    ///
	/// <remarks>	Gets the point at the start (index 0) of the geometry. </remarks>
    ///
    /// <param name="point">	The point to be assigned the start point </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void get_StartPoint(GW3DPoint *point ) const;
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the end point. </summary>
    ///
	/// <remarks>	Gets the point at the end of the geometry. </remarks>
    ///
    /// <param name="point">	The point to be assigned the end point </param>
    ///////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void get_EndPoint(GW3DPoint *point ) const;
   
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the point at a given distance along the linear ring. </summary>
    ///
    /// <param name="distance">	The distance along the curve at which to sample position, in the same 
    /// 						unit as the	coordinates of the geometry. </param>
    /// <param name="point">		The point to be assigned the position at the given distance. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void get_Value( double, GW3DPoint *point ) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Sets the coordinate dimension. </summary>
    ///
    /// <remarks>	Sets the coordinate dimension of the geometry (2 or 3).  If coordinate dimension is 
    /// 			set to 2, all existing z values will be set to 0</remarks>
    ///
    /// <param name="nDimension">	The dimension. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void put_CoordinateDimension( int nDimension );
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Sets the number of points the line string is to contain. </summary>
    ///
    /// <remarks>	Sets the number of points for the line string, creating null points or removing 
    /// 			points as neccessary. Use in conjunction with put_Point.</remarks>
    ///
    /// <param name="num">	The number of points. </param>
    /// 
	/// <see cref="put_Point"/>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void        put_NumPoints( int num );
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Set the location of a vertex in linear ring. </summary>
    /// 
	/// <remarks>	If the index given is larger than the number of necessary the number of existing 
	/// 			points in the linear ring, the point count will be increased to accomodate the 
	/// 			request. </remarks>
    ///
    /// <param name="index">	Zero-based index of the vertex to assign. </param>
    /// <param name="point">	The value to assign to the vertex. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void        put_Point( int index, GW3DPoint * point);
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Set the location of a vertex in linear ring. </summary>
    ///
    /// <remarks>	If the index given is larger than the number of necessary the number of existing
    ///				points in the linear ring, the point count will be increased to accomodate the
    ///				request. </remarks>
    ///
    /// <param name="index">	Zero-based index of the vertex to assign. </param>
    /// <param name="x">		The x coordinate. </param>
    /// <param name="y">		The y coordinate. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void        put_Point( int index, double x, double y );
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Set the location of a vertex in linear ring. </summary>
    ///
    /// <remarks>	If the index given is larger than the number of necessary the number of existing
    /// 			points in the linear ring, the point count will be increased to accomodate the
    ///				request. </remarks>
    ///
    /// <param name="index">	Zero-based index of the vertex to assign. </param>
    /// <param name="x">		The x coordinate. </param>
    /// <param name="y">		The y coordinate. </param>
    /// <param name="z">		The z coordinate. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void        put_Point( int index, double x, double y, double z );
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Assign all points in a linear ring. </summary>
    ///
    /// <remarks>	This method clears any existing points assigned to this linear ring, and assigns a 
    /// 			whole new set. </remarks>
    ///
    /// <param name="nPointsIn">	The number of points being passed in padfX and padfY. </param>
    /// <param name="padfX">	 	List of x coordinates of points being assigned. </param>
    /// <param name="padfY">	 	List of y coordinates of points being assigned. </param>
    /// <param name="padfZ">	 	(optional) List of z coordinates of points being assigned. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void        put_Points( int, double * padfX, double * padfY, double * padfZ = 0 );

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Adds a point to the linear ring. </summary>
    ///
    /// <remarks>	The vertex count of the linear ring is increased by one, and assigned from the 
    /// 			passed location value. </remarks>
    ///
    /// <param name="point">	The point to assign to the new vertex. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void        add_Point( GW3DPoint * point );
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Adds a point to the line string. </summary>
    ///
    /// <remarks>	The vertex count of the line string is increased by one, and assigned from the
    /// 			passed location value. </remarks>
    ///
    /// <param name="x">	The x coordinate. </param>
    /// <param name="y">	The y coordinate. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void        add_Point( double x, double y );
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Adds a point to the line string. </summary>
    ///
    /// <remarks>	The vertex count of the line string is increased by one, and assigned from the
    /// 			passed location value. </remarks>
    ///
    /// <param name="x">	The x coordinate. </param>
    /// <param name="y">	The y coordinate. </param>
    /// <param name="z">	The z coordinate. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void        add_Point( double x, double y, double z );

	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the number of points in the line string. </summary>
    ///
    /// <returns>	The number of points. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    int         get_NumPoints() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Get the x coordinate of a vertex. </summary>
    ///
    /// <param name="i">	Zero-based index of the vertex. </param>
    ///
    /// <returns>	The x coordinate. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    double      get_X( int i ) const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Get the y coordinate of a vertex. </summary>
    ///
    /// <param name="i">	Zero-based index of the vertex. </param>
    ///
    /// <returns>	The y coordinate. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    double      get_Y( int i ) const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Get the z coordinate of a vertex. </summary>
    ///
    /// <param name="i">	Zero-based index of the vertex. </param>
    ///
    /// <returns>	The z coordinate. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    double      get_Z( int i ) const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets a point in the linear ring. </summary>
    ///
    /// <remarks>	Get the point in the linear ring at the given index. This should always be greater 
    /// 			than or equal to 0 and less than the value returned by getNumPoints. </remarks>
    ///
    /// <param name="i">	Zero-based index of the point to retrieve. </param>
    /// <param name="point">	The point to be assigned the point at the given index. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

	void		get_Point( int i, GW3DPoint * p ) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Query if the winding order of the geometry is clockwise. </summary>
    ///
    /// <remarks>	Query if the vertices are ordered in a clockwise winding order. If the winding 
    /// 			order is not correct, it may be fixed using reverse_WindingOrder.</remarks>
    ///
    /// <returns>	True if clockwise or less than two points. </returns>
    /// 
	/// <see cref="reverse_WindingOrder"/>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    int get_IsClockwise() const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Reverse the winding order. </summary>
    ///
    /// <remarks>	Reverses the order of the vertices in the geometry. </remarks>
    /// 
	/// <see cref="get_IsClockwise"/>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void reverse_WindingOrder();

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Force rings to be closed. </summary>
    ///
    /// <remarks>	If this geometry, or any contained geometries has polygon rings that are not closed, 
    /// 			they will be closed by adding the starting point at the end. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void close_Rings();

 ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Empties this geometry. </summary>
    ///
    /// <remarks>	Clear geometry information. This restores the geometry to it's initial state after 
    /// 			construction, and before assignment of actual geometry. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void empty();

	
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Compute area of ring. </summary>
    ///
    /// <remarks>	The area is computed according to Green's Theorem:
    ///
    ///				Area is "Sum(x(i)*(y(i+1) - y(i-1)))/2" for i = 0 to pointCount-1, assuming the last 
    ///				point is a duplicate of the first. The area is expressed in the same unit as the 
    ///				coordinates of the geometry.</remarks>
    ///
    /// <returns>	The area. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    double get_Area() const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Makes a deep copy of this object. </summary>
    ///
	/// <remarks>	Note: The returned object should be deleted wen no longer needed, to prevent memory 
	/// 			leak. </remarks>
    ///
    /// <returns>	A copy of this object. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual GW3DGeometry* clone() const override;

	// Accept a visitor. 
	virtual void accept(IGW3DGeometryVisitor* visitor)  override
	{
		visitor->visit(this);
	}

	// Accept a visitor. 
	virtual void accept(IGW3DConstGeometryVisitor* visitor) const  override
	{
		visitor->visit(this);
	}
    //internal use only, do not use.
    const GW3DBaseImpl* getBaseImpl( ) const override;
    //internal use only, do not use.
    virtual GW3DBaseImpl* getBaseImpl( ) override;
private:

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Constructor. </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    GW3DLinearRing( GW3DLinearRingImpl *p);


    friend class GW3DPolygon;
    GW3DLinearRingImpl * pimpl_;
};


class GEOWEB3DENGINE_API GW3DCircularString : public GW3DSimpleCurve
{

};


class GEOWEB3DENGINE_API GW3DCompoundCurve : public GW3DCurve
{

};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Concrete class representing a polygon. </summary>
///
/// <remarks>	Note that the OpenGIS simple features polygons consist of one outer ring, and zero 
/// 			or more inner rings.  A polygon cannot represent disconnected regions (such as 
/// 			multiple islands in a political body).  The GW3DMultiPolygon must be used for this. 
/// 			</remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class GEOWEB3DENGINE_API GW3DPolygon : public GW3DGeometry
{
public:

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Default constructor. </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    GW3DPolygon();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Copy constructor. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	GW3DPolygon(const GW3DPolygon& rhs);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Assignment operator. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	GW3DPolygon& operator=(const GW3DPolygon& rhs);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Destructor. </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual     ~GW3DPolygon();
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the geometry type. </summary>
    ///
    /// <returns>	The geometry type. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual GeometryType get_GeometryType() const override;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Empties this geometry. </summary>
    ///
    /// <remarks>	Clear geometry information. This restores the geometry to it's initial state after 
    /// 			construction, and before assignment of actual geometry. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void empty();
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Query if the geometry is empty. </summary>
    ///
    /// <remarks>	Normally this returns false, except when an object is instantiated and geometry has 
    /// 			not been assigned </remarks>
    ///
    /// <returns>	True if there is no geometry, false if not. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual GW3DBoolean  get_IsEmpty() const override;
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the dimension of the geometry. </summary>
    ///
    /// <remarks>	Returns the inherent dimension of the geometry (2 for polygons). </remarks>
    ///
    /// <returns>	The dimension. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual int get_Dimension() const override;
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Compute area of polygon. </summary>
    ///
    /// <remarks>	The area is computed as the area of the outer ring less the area of all internal 
    /// 			rings. </remarks>
    ///
    /// <returns>	The area. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual double get_Area() const;
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the envelope of the geometry. </summary>
    ///
    /// <remarks>	Computes and returns the bounding envelope for this geometry. </remarks>
    ///
    /// <param name="psEnvelope">	An envelope to be set to this geometry's envelope. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void get_Envelope( GW3DEnvelope * psEnvelope ) const override;

	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Segmentizes the geometry. </summary>
    ///
    /// <remarks>	Modify the geometry such it has no segment longer than the max length. The distance 
    /// 			is expressed in the same unit as the coordinates of the geometry.</remarks>
    ///
    /// <param name="dfMaxLength">	The maximum distance between any 2 vertices after segmentization.
    /// 							 </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void segmentize(double dfMaxLength);
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Sets the coordinate dimension. </summary>
    ///
    /// <remarks>	Sets the coordinate dimension of the geometry (2 or 3).  If coordinate dimension is 
    /// 			set to 2, all existing z values will be set to 0</remarks>
    ///
    /// <param name="nDimension">	The dimension. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void put_CoordinateDimension( int nDimension );

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Adds a ring. </summary>
    ///
    /// <remarks>	If the polygon has no external ring (it is empty) this will be used as the external 
    /// 			ring, otherwise it is used as an internal ring. </remarks>
    ///
    /// <param name="ring">	The ring to be added to the polygon. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void        add_Ring( GW3DLinearRing * ring);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets number interior rings. </summary>
    ///
    /// <remarks>	This function returns the number of interior rings in the polygon. </remarks>
    ///
    /// <returns>	The number interior rings. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    int get_NumInteriorRings() const;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Gets the exterior ring. </summary>
	///
	/// <remarks>	If you are to do a compare, make sure you do not compare pointers, because every 
	/// 			time you call this api a new pointer to the data is created.  Use the equals
	/// 			function instead. </remarks>
	///
	/// <returns>	The exterior ring. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	GW3DLinearRingPtr get_ExteriorRing() const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets an interior ring. </summary>
    ///
    /// <remarks>	If you are to do a compare, make sure you do not compare pointers, because every
    /// 			time you call this api a new pointer to the data is created.  Use the equals
    /// 			function instead. </remarks>
    ///
    /// <returns>	The interior ring. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    GW3DLinearRingPtr get_InteriorRing( int ) const;
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Force rings to be closed. </summary>
    ///
    /// <remarks>	If this geometry, or any contained geometries has polygon rings that are not closed, 
    /// 			they will be closed by adding the starting point at the end. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void close_Rings();

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Determine if a point lies on the surface of the polygon. </summary>
    ///
    /// <param name="point">	The point. </param>
    ///
    /// <returns>	true if it succeeds, false if it fails. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    bool get_IsPointOnSurface( const GW3DPoint * point ) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Makes a deep copy of this object. </summary>
    ///
	/// <remarks>	Note: The returned object should be deleted wen no longer needed, to prevent memory 
	/// 			leak. </remarks>
    ///
    /// <returns>	A copy of this object. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual GW3DGeometry* clone() const override;

	// Accept a visitor. 
	virtual void accept(IGW3DGeometryVisitor* visitor)  override
	{
		visitor->visit(this);
	}

	// Accept a visitor. 
	virtual void accept(IGW3DConstGeometryVisitor* visitor) const  override
	{
		visitor->visit(this);
	}

    //internal use only, do not use.
    const GW3DBaseImpl* getBaseImpl( ) const override;
    //internal use only, do not use.
    virtual GW3DBaseImpl* getBaseImpl( ) override;

private:
    GW3DPolygonImpl* pimpl_;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A Multipolygon </summary>
///
/// <remarks>	A collection of non overlapping polygons. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class GEOWEB3DENGINE_API GW3DMultiPolygon : public GW3DGeometry
{
public:

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Default constructor. </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    GW3DMultiPolygon();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Copy constructor. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	GW3DMultiPolygon(const GW3DMultiPolygon& rhs);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Assignment operator. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	GW3DMultiPolygon& operator=(const GW3DMultiPolygon& rhs);
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Destructor. </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual ~GW3DMultiPolygon();
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the geometry type. </summary>
    ///
    /// <returns>	The geometry type. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual GeometryType get_GeometryType() const override;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Compute the area of the multipolygon. </summary>
    ///
    /// <remarks>	The area is computed as the sum of the areas of all polygon members in this 
    /// 			collection. </remarks>
    ///
    /// <returns>	The area. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual double  get_Area() const;
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Empties this geometry. </summary>
    ///
    /// <remarks>	Clear geometry information. This restores the geometry to it's initial state after 
    /// 			construction, and before assignment of actual geometry. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void empty();

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Flatten to 2D. </summary>
    ///
    /// <remarks>	Convert geometry to strictly 2D. In a sense this converts all Z coordinates to 0.0.
    /// 			 </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void flatten_To2D();
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Query if the geometry is empty. </summary>
    ///
    /// <remarks>	Normally this returns false, except when an object is instantiated and geometry has 
    /// 			not been assigned </remarks>
    ///
    /// <returns>	True if there is no geometry, false if not. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual GW3DBoolean  get_IsEmpty() const override;
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Segmentizes the geometry. </summary>
    ///
    /// <remarks>	Modify the geometry such it has no segment longer than the max length. The distance 
    /// 			is expressed in the same unit as the coordinates of the geometry.</remarks>
    ///
    /// <param name="dfMaxLength">	The maximum distance between any 2 vertices after segmentization.
    /// 							 </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void segmentize(double dfMaxLength);
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the envelope of the geometry. </summary>
    ///
    /// <remarks>	Computes and returns the bounding envelope for this geometry. </remarks>
    ///
    /// <param name="psEnvelope">	An envelope to be set to this geometry's envelope. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void get_Envelope( GW3DEnvelope * psEnvelope ) const override;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the dimension of the geometry. </summary>
    ///
    /// <remarks>	Returns the inherent dimension of the geometry (2 for polygons). </remarks>
    ///
    /// <returns>	The dimension. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual int get_Dimension() const override;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the number of geometries. </summary>
    ///
    /// <returns>	The number of geometries. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    int         get_NumGeometries() const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Sets the coordinate dimension. </summary>
    ///
    /// <remarks>	Sets the coordinate dimension of the geometry (2 or 3).  If coordinate dimension is 
    /// 			set to 2, all existing z values will be set to 0</remarks>
    ///
    /// <param name="nDimension">	The dimension. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
   
    virtual void put_CoordinateDimension( int nDimension );

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Adds a geometry. </summary>
    ///
    /// <remarks>	Add a polygon to the collection. </remarks>
    ///
    /// <param name="poly">	The polygon. </param>
    ///
	/// <returns>	GW3D_sOk if succeeded. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual GW3DResult add_Geometry( const GW3DGeometry * poly);
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Force rings to be closed. </summary>
    ///
    /// <remarks>	If this geometry, or any contained geometries has polygon rings that are not closed, 
    /// 			they will be closed by adding the starting point at the end. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    void close_Rings();

	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Makes a deep copy of this object. </summary>
    ///
	/// <remarks>	Note: The returned object should be deleted wen no longer needed, to prevent memory 
	/// 			leak. </remarks>
    ///
    /// <returns>	A copy of this object. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual GW3DGeometry* clone() const override;

	// Accept a visitor. 
	virtual void accept(IGW3DGeometryVisitor* visitor)  override
	{
		visitor->visit(this);
	}

	// Accept a visitor. 
	virtual void accept(IGW3DConstGeometryVisitor* visitor) const  override
	{
		visitor->visit(this);
	}

    //internal use only, do not use.
    const GW3DBaseImpl* getBaseImpl( ) const override;
    //internal use only, do not use.
    virtual GW3DBaseImpl* getBaseImpl( ) override;
private:
    GW3DMultiPolygonImpl* pimpl_;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A Multipoint </summary>
///
/// <remarks>	A collection of points.  </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class GEOWEB3DENGINE_API GW3DMultiPoint : public GW3DGeometry
{
public:

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Default constructor. </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    GW3DMultiPoint();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Copy constructor. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	GW3DMultiPoint(const GW3DMultiPoint& rhs);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Assignment operator. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	GW3DMultiPoint& operator=(const GW3DMultiPoint& rhs);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Destructor. </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual ~GW3DMultiPoint();
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the geometry type. </summary>
    ///
    /// <returns>	The geometry type. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual GeometryType get_GeometryType() const override;
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Empties this geometry. </summary>
    ///
    /// <remarks>	Clear geometry information. This restores the geometry to it's initial state after 
    /// 			construction, and before assignment of actual geometry. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void empty();
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Flatten to 2D. </summary>
    ///
    /// <remarks>	Convert geometry to strictly 2D. In a sense this converts all Z coordinates to 0.0.
    /// 			 </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void flatten_To2D();
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Query if the geometry is empty. </summary>
    ///
    /// <remarks>	Normally this returns false, except when an object is instantiated and geometry has 
    /// 			not been assigned </remarks>
    ///
    /// <returns>	True if there is no geometry, false if not. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual GW3DBoolean  get_IsEmpty() const override;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the envelope of the geometry. </summary>
    ///
    /// <remarks>	Computes and returns the bounding envelope for this geometry. </remarks>
    ///
    /// <param name="psEnvelope">	An envelope to be set to this geometry's envelope. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void get_Envelope( GW3DEnvelope * psEnvelope ) const override;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the dimension of the geometry. </summary>
    ///
    /// <remarks>	Returns the inherent dimension of the geometry (0 for points). </remarks>
    ///
    /// <returns>	The dimension. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual int get_Dimension() const override;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the number of geometries. </summary>
    ///
    /// <returns>	The number of geometries. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    int         get_NumGeometries() const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Sets the coordinate dimension. </summary>
    ///
    /// <remarks>	Sets the coordinate dimension of the geometry (2 or 3).  If coordinate dimension is 
    /// 			set to 2, all existing z values will be set to 0</remarks>
    ///
    /// <param name="nDimension">	The dimension. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void put_CoordinateDimension( int nDimension );

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Adds a geometry. </summary>
    ///
    /// <remarks>	Adds a point to the collection. </remarks>
    ///
    /// <param name="point">	The point. </param>
    ///
    /// <returns>	GW3D_sOk if succeeded. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual GW3DResult add_Geometry( const GW3DGeometry * point);

	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Segmentizes the geometry. </summary>
    ///
    /// <remarks>	Modify the geometry such it has no segment longer than the max length. The distance 
    /// 			is expressed in the same unit as the coordinates of the geometry.</remarks>
    ///
    /// <param name="dfMaxLength">	The maximum distance between any 2 vertices after segmentization.
    /// 							 </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void segmentize(double dfMaxLength);
	
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Makes a deep copy of this object. </summary>
    ///
	/// <remarks>	Note: The returned object should be deleted wen no longer needed, to prevent memory 
	/// 			leak. </remarks>
    ///
    /// <returns>	A copy of this object. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual GW3DGeometry* clone() const override;

	// Accept a visitor. 
	virtual void accept(IGW3DGeometryVisitor* visitor)  override
	{
		visitor->visit(this);
	}

	// Accept a visitor. 
	virtual void accept(IGW3DConstGeometryVisitor* visitor) const  override
	{
		visitor->visit(this);
	}

    //internal use only, do not use.
    const GW3DBaseImpl* getBaseImpl( ) const override;
    //internal use only, do not use.
    virtual GW3DBaseImpl* getBaseImpl( ) override;
private:
    GW3DMultiPointImpl* pimpl_;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A MultiLineString. </summary>
///
/// <remarks>	A collection of line strings. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class GEOWEB3DENGINE_API GW3DMultiLineString : public GW3DGeometry
{
public:

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Default constructor. </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    GW3DMultiLineString();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Copy constructor. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	GW3DMultiLineString(const GW3DMultiLineString& rhs);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Assignment operator. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	GW3DMultiLineString& operator=(const GW3DMultiLineString& rhs);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Destructor. </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual ~GW3DMultiLineString();

	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the geometry type. </summary>
    ///
    /// <returns>	The geometry type. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual GeometryType get_GeometryType() const override;
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Empties this geometry. </summary>
    ///
    /// <remarks>	Clear geometry information. This restores the geometry to it's initial state after 
    /// 			construction, and before assignment of actual geometry. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void empty();
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Flatten to 2D. </summary>
    ///
    /// <remarks>	Convert geometry to strictly 2D. In a sense this converts all Z coordinates to 0.0.
    /// 			 </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void flatten_To2D();
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Query if the geometry is empty. </summary>
    ///
    /// <remarks>	Normally this returns false, except when an object is instantiated and geometry has 
    /// 			not been assigned </remarks>
    ///
    /// <returns>	True if there is no geometry, false if not. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual GW3DBoolean  get_IsEmpty() const override;
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Segmentizes the geometry. </summary>
    ///
    /// <remarks>	Modify the geometry such it has no segment longer than the max length. The distance 
    /// 			is expressed in the same unit as the coordinates of the geometry.</remarks>
    ///
    /// <param name="dfMaxLength">	The maximum distance between any 2 vertices after segmentization.
    /// 							 </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void segmentize(double dfMaxLength);
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the envelope of the geometry. </summary>
    ///
    /// <remarks>	Computes and returns the bounding envelope for this geometry. </remarks>
    ///
    /// <param name="psEnvelope">	An envelope to be set to this geometry's envelope. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void get_Envelope( GW3DEnvelope * psEnvelope ) const override;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the dimension of the geometry. </summary>
    ///
    /// <remarks>	Returns the inherent dimension of the geometry (1 for lines). </remarks>
    ///
    /// <returns>	The dimension. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual int get_Dimension() const override;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Gets the number of geometries. </summary>
    ///
    /// <returns>	The number of geometries. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    int get_NumGeometries() const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Sets the coordinate dimension. </summary>
    ///
    /// <remarks>	Sets the coordinate dimension of the geometry (2 or 3).  If coordinate dimension is 
    /// 			set to 2, all existing z values will be set to 0</remarks>
    ///
    /// <param name="nDimension">	The dimension. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual void put_CoordinateDimension( int nDimension );

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Adds a geometry. </summary>
    ///
    /// <remarks>	Add a line string to the collection. </remarks>
    ///
    /// <param name="line">	The line string. </param>
    ///
	/// <returns>	GW3D_sOk if succeeded. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual GW3DResult add_Geometry( const GW3DGeometry * line );

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Makes a deep copy of this object. </summary>
    ///
	/// <remarks>	Note: The returned object should be deleted wen no longer needed, to prevent memory 
	/// 			leak. </remarks>
    ///
    /// <returns>	A copy of this object. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    virtual GW3DGeometry* clone() const override;

	// Accept a visitor. 
	virtual void accept(IGW3DGeometryVisitor* visitor)  override
	{
		visitor->visit(this);
	}

	// Accept a visitor. 
	virtual void accept(IGW3DConstGeometryVisitor* visitor) const  override
	{
		visitor->visit(this);
	}

    //internal use only, do not use.
    const GW3DBaseImpl* getBaseImpl( ) const override;
    //internal use only, do not use.
    virtual GW3DBaseImpl* getBaseImpl( ) override;
private:
    GW3DMultiLineStringImpl* pimpl_;

};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A factory for creating spatial geometries. </summary>
///
/// <returns>	A GW3DLineString. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

namespace GeometryFactory
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Create approximate arc angles. </summary>
    ///
	/// <remarks>	All argumens are in degrees; start/stop angles are clockwise of positive x </remarks>
    ///
    /// <returns>	A GW3DLineString. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    GEOWEB3DENGINE_API GW3DGeometryPtr  create_ApproximateArcAngles( double center_x, double center_y, double center_z,  
		double x_radius, double y_radius, 
		double rotation,   double start_angle, double end_angle, double max_angle_step );

}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Geometry Utiltiy </summary>
////////////////////////////////////////////////////////////////////////////////////////////////////

namespace GeometryUtility
{
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Configures a GW3DEnvelope to the internal WGS84 Convention.  </summary>
	///
	/// <remarks>	Latitudes: North must be greater than South and will be clamped between [-90, 90] if they are outside the limits.
	///				Longitudes must be [-180.0, 180.0] and not equal.
	///
	////////////////////////////////////////////////////////////////////////////////////////////////////
	static GW3DResult set_WGS84Envelope(GW3DEnvelope& env, const double north, const double south, const double west, const double east)
	{
		if (north <= south || west == east)
		{
			return GW3D_eInvalidArgument;
		}
		if ((east < -180.0 || east > 180.0) ||
			(west < -180.0 || west > 180.0))
		{
			return GW3D_eArgumentOutOfRange;
		}

		env.MinX = west;
		env.MaxX = east;
		env.MinY = north > 90.0 ? 90.0 : north;
		env.MaxY = south < -90.0 ? -90.0 : south;

		return GW3D_sOk;
	}
}

namespace SpatialDatabaseFactory
{
	GEOWEB3DENGINE_API IGW3DSpatialDatabasePtr create_SpatialDatabase();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	A factory for creating smart cache databases . </summary>
///
/// <returns>	A GW3DSmartCacheDatabase. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////
namespace SmartCacheDatabaseFactory
{
	/// <summary> Creates a smart cache database. </summary>
	/// 
	/// <remarks> max_connections_per_locality cannot exceed max_records </remarks>
	/// 
	/// <param name="max_records"> The maximum number of records that the smart cache can create </param>
	/// <param name="max_connections_per_locality"> The maximum number of connections that the smart cache can create for each record </param>
	/// <returns>	A GW3DSmartCacheDatabase. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	GEOWEB3DENGINE_API IGW3DSmartCacheDatabasePtr create_SmartCacheDatabase( size_t max_records, size_t max_connections_per_locality );
}

}