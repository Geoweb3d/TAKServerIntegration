#pragma once
/**
* @file GW3DPoint.h
*
* GW3DPoint Classes
*/

//////////////////////////////////////////////////////////////////////////////
//
// Geoweb3d SDK
// Copyright (c) Geoweb3d, 2008-2019, all rights reserved.
//
// This code can be used only under the rights granted to you by the specific
// Geoweb3d SDK license under which the SDK provided.
//
//////////////////////////////////////////////////////////////////////////////
#include "GW3DGeometry.h"


/*! Primary namespace */
namespace Geoweb3d
{

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	A point. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	class GEOWEB3DENGINE_API GW3DPoint : public GW3DGeometry
	{
	public:

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Default constructor. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		GW3DPoint();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Copy constructor. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		GW3DPoint(const GW3DPoint& rhs);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Assignment operator. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		GW3DPoint& operator=(const GW3DPoint& rhs);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Constructor. </summary>
		///
		/// <param name="x">	The x coordinate. </param>
		/// <param name="y">	The y coordinate. </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		GW3DPoint(double x, double y);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Constructor. </summary>
		///
		/// <param name="x">	The x coordinate. </param>
		/// <param name="y">	The y coordinate. </param>
		/// <param name="z">	The z coordinate. </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		GW3DPoint(double x, double y, double z);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Destructor. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual     ~GW3DPoint();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets the dimension of the geometry. </summary>
		///
		/// <remarks>	Returns the inherent dimension of the geometry (0 for points). </remarks>
		///
		/// <returns>	The dimension. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual int get_Dimension() const override;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets the envelope of the geometry. </summary>
		///
		/// <remarks>	Computes and returns the bounding envelope for this geometry. </remarks>
		///
		/// <param name="psEnvelope">	An envelope to be set to this geometry's envelope. </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void get_Envelope(GW3DEnvelope* psEnvelope) const override;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Empties this geometry. </summary>
		///
		/// <remarks>	Clear geometry information. This restores the geometry to it's initial state after 
		/// 			construction, and before assignment of actual geometry. </remarks>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		void empty();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Query if the geometry is empty. </summary>
		///
		/// <remarks>	Normally this returns false, except when an object is instantiated and geometry has 
		/// 			not been assigned </remarks>
		///
		/// <returns>	True if there is no geometry, false if not. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual GW3DBoolean  get_IsEmpty() const override;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Get x coordinate. </summary>
		///
		/// <returns>	The x coordinate. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		double      get_X() const;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Get y coordinate. </summary>
		///
		/// <returns>	The y coordinate. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		double      get_Y() const;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Get z coordinate. </summary>
		///
		/// <returns>	The z coordinate. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		double      get_Z() const;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Get xyz coordinate. </summary>
		///
		/// <returns>	fills in.  Z will be 0 if not 3 dimensions . </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void get_XYZ(double* x, double* y, double* z) const;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Sets the coordinate dimension. </summary>
		///
		/// <remarks>	Sets the coordinate dimension of the geometry (2 or 3).  If coordinate dimension is 
		/// 			set to 2, all existing z values will be set to 0</remarks>
		///
		/// <param name="nDimension">	The dimension. </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void put_CoordinateDimension(int nDimension);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Sets the x coordinate. </summary>
		///
		/// <param name="xIn">	The x coordinate. </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		void        put_X(double xIn);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Sets the y coordinate. </summary>
		///
		/// <param name="yIn">	The y coordinate. </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		void        put_Y(double yIn);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Sets the z coordinate. </summary>
		///
		/// <param name="zIn">	The z coordinate. </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		void		put_Z(double zIn);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets distance in meters. </summary>
		///
		/// <remarks>	Given two geographic coordinates (longitude/latitude in degrees), return the 
		/// 			geodesic arc distance in meters.  The WGS84 spheroid is used. if use_z is set to 
		/// 			true yet CoordinateDimension is not 3, results will  be calculated but a 
		/// 			GW3D_sAmbiguousArgument will be returned. </remarks>
		///
		/// <param name="p2">	 	The second GW3DPoint. </param>
		/// <param name="use_z"> 	true to use z coordinate in the calculation. </param>
		/// <param name="result">	[in,out] The result. </param>
		///
		/// <returns>	GW3D_sOk if succeeded. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		GW3DResult get_DistanceInMeters(const GW3DPoint* p2, bool use_z, double& result) const;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets the geometry type. </summary>
		///
		/// <returns>	The geometry type. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual GeometryType get_GeometryType() const override;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Makes a deep copy of this object. </summary>
		///
		/// <remarks>	Note: The returned object should be deleted wen no longer needed, to prevent memory 
		/// 			leak. </remarks>
		///
		/// <returns>	A copy of this object. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual GW3DGeometry* clone() const override;

		// Accept a visitor. 
		virtual void accept(IGW3DGeometryVisitor* visitor)  override
		{
			visitor->visit(this);
		}

		// Accept a visitor. 
		virtual void accept(IGW3DConstGeometryVisitor* visitor) const  override
		{
			visitor->visit(this);
		}

		//internal use only, do not use.
		const GW3DBaseImpl* getBaseImpl() const override;
		//internal use only, do not use.
		virtual GW3DBaseImpl* getBaseImpl() override;
	private:

		friend class GW3DPolygon;
		friend class GW3DLineString;
		friend class GW3DLinearRing;
		GW3DPointImpl* pimpl_;
	};

};