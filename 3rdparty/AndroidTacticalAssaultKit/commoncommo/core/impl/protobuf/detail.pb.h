// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: detail.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_detail_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_detail_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "contact.pb.h"
#include "group.pb.h"
#include "precisionlocation.pb.h"
#include "status.pb.h"
#include "takv.pb.h"
#include "track.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_detail_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_detail_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace atakmap {
namespace commoncommo {
namespace protobuf {
namespace v1 {
class Detail;
struct DetailDefaultTypeInternal;
extern DetailDefaultTypeInternal _Detail_default_instance_;
}  // namespace v1
}  // namespace protobuf
}  // namespace commoncommo
}  // namespace atakmap
PROTOBUF_NAMESPACE_OPEN
template<> ::atakmap::commoncommo::protobuf::v1::Detail* Arena::CreateMaybeMessage<::atakmap::commoncommo::protobuf::v1::Detail>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace atakmap {
namespace commoncommo {
namespace protobuf {
namespace v1 {

// ===================================================================

class Detail final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:atakmap.commoncommo.protobuf.v1.Detail) */ {
 public:
  inline Detail() : Detail(nullptr) {}
  ~Detail() override;
  explicit constexpr Detail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Detail(const Detail& from);
  Detail(Detail&& from) noexcept
    : Detail() {
    *this = ::std::move(from);
  }

  inline Detail& operator=(const Detail& from) {
    CopyFrom(from);
    return *this;
  }
  inline Detail& operator=(Detail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Detail& default_instance() {
    return *internal_default_instance();
  }
  static inline const Detail* internal_default_instance() {
    return reinterpret_cast<const Detail*>(
               &_Detail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Detail& a, Detail& b) {
    a.Swap(&b);
  }
  inline void Swap(Detail* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Detail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Detail* New() const final {
    return new Detail();
  }

  Detail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Detail>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Detail& from);
  void MergeFrom(const Detail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Detail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "atakmap.commoncommo.protobuf.v1.Detail";
  }
  protected:
  explicit Detail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXmlDetailFieldNumber = 1,
    kContactFieldNumber = 2,
    kGroupFieldNumber = 3,
    kPrecisionLocationFieldNumber = 4,
    kStatusFieldNumber = 5,
    kTakvFieldNumber = 6,
    kTrackFieldNumber = 7,
  };
  // string xmlDetail = 1;
  void clear_xmldetail();
  const std::string& xmldetail() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xmldetail(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xmldetail();
  PROTOBUF_MUST_USE_RESULT std::string* release_xmldetail();
  void set_allocated_xmldetail(std::string* xmldetail);
  private:
  const std::string& _internal_xmldetail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xmldetail(const std::string& value);
  std::string* _internal_mutable_xmldetail();
  public:

  // .atakmap.commoncommo.protobuf.v1.Contact contact = 2;
  bool has_contact() const;
  private:
  bool _internal_has_contact() const;
  public:
  void clear_contact();
  const ::atakmap::commoncommo::protobuf::v1::Contact& contact() const;
  PROTOBUF_MUST_USE_RESULT ::atakmap::commoncommo::protobuf::v1::Contact* release_contact();
  ::atakmap::commoncommo::protobuf::v1::Contact* mutable_contact();
  void set_allocated_contact(::atakmap::commoncommo::protobuf::v1::Contact* contact);
  private:
  const ::atakmap::commoncommo::protobuf::v1::Contact& _internal_contact() const;
  ::atakmap::commoncommo::protobuf::v1::Contact* _internal_mutable_contact();
  public:
  void unsafe_arena_set_allocated_contact(
      ::atakmap::commoncommo::protobuf::v1::Contact* contact);
  ::atakmap::commoncommo::protobuf::v1::Contact* unsafe_arena_release_contact();

  // .atakmap.commoncommo.protobuf.v1.Group group = 3;
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  const ::atakmap::commoncommo::protobuf::v1::Group& group() const;
  PROTOBUF_MUST_USE_RESULT ::atakmap::commoncommo::protobuf::v1::Group* release_group();
  ::atakmap::commoncommo::protobuf::v1::Group* mutable_group();
  void set_allocated_group(::atakmap::commoncommo::protobuf::v1::Group* group);
  private:
  const ::atakmap::commoncommo::protobuf::v1::Group& _internal_group() const;
  ::atakmap::commoncommo::protobuf::v1::Group* _internal_mutable_group();
  public:
  void unsafe_arena_set_allocated_group(
      ::atakmap::commoncommo::protobuf::v1::Group* group);
  ::atakmap::commoncommo::protobuf::v1::Group* unsafe_arena_release_group();

  // .atakmap.commoncommo.protobuf.v1.PrecisionLocation precisionLocation = 4;
  bool has_precisionlocation() const;
  private:
  bool _internal_has_precisionlocation() const;
  public:
  void clear_precisionlocation();
  const ::atakmap::commoncommo::protobuf::v1::PrecisionLocation& precisionlocation() const;
  PROTOBUF_MUST_USE_RESULT ::atakmap::commoncommo::protobuf::v1::PrecisionLocation* release_precisionlocation();
  ::atakmap::commoncommo::protobuf::v1::PrecisionLocation* mutable_precisionlocation();
  void set_allocated_precisionlocation(::atakmap::commoncommo::protobuf::v1::PrecisionLocation* precisionlocation);
  private:
  const ::atakmap::commoncommo::protobuf::v1::PrecisionLocation& _internal_precisionlocation() const;
  ::atakmap::commoncommo::protobuf::v1::PrecisionLocation* _internal_mutable_precisionlocation();
  public:
  void unsafe_arena_set_allocated_precisionlocation(
      ::atakmap::commoncommo::protobuf::v1::PrecisionLocation* precisionlocation);
  ::atakmap::commoncommo::protobuf::v1::PrecisionLocation* unsafe_arena_release_precisionlocation();

  // .atakmap.commoncommo.protobuf.v1.Status status = 5;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::atakmap::commoncommo::protobuf::v1::Status& status() const;
  PROTOBUF_MUST_USE_RESULT ::atakmap::commoncommo::protobuf::v1::Status* release_status();
  ::atakmap::commoncommo::protobuf::v1::Status* mutable_status();
  void set_allocated_status(::atakmap::commoncommo::protobuf::v1::Status* status);
  private:
  const ::atakmap::commoncommo::protobuf::v1::Status& _internal_status() const;
  ::atakmap::commoncommo::protobuf::v1::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::atakmap::commoncommo::protobuf::v1::Status* status);
  ::atakmap::commoncommo::protobuf::v1::Status* unsafe_arena_release_status();

  // .atakmap.commoncommo.protobuf.v1.Takv takv = 6;
  bool has_takv() const;
  private:
  bool _internal_has_takv() const;
  public:
  void clear_takv();
  const ::atakmap::commoncommo::protobuf::v1::Takv& takv() const;
  PROTOBUF_MUST_USE_RESULT ::atakmap::commoncommo::protobuf::v1::Takv* release_takv();
  ::atakmap::commoncommo::protobuf::v1::Takv* mutable_takv();
  void set_allocated_takv(::atakmap::commoncommo::protobuf::v1::Takv* takv);
  private:
  const ::atakmap::commoncommo::protobuf::v1::Takv& _internal_takv() const;
  ::atakmap::commoncommo::protobuf::v1::Takv* _internal_mutable_takv();
  public:
  void unsafe_arena_set_allocated_takv(
      ::atakmap::commoncommo::protobuf::v1::Takv* takv);
  ::atakmap::commoncommo::protobuf::v1::Takv* unsafe_arena_release_takv();

  // .atakmap.commoncommo.protobuf.v1.Track track = 7;
  bool has_track() const;
  private:
  bool _internal_has_track() const;
  public:
  void clear_track();
  const ::atakmap::commoncommo::protobuf::v1::Track& track() const;
  PROTOBUF_MUST_USE_RESULT ::atakmap::commoncommo::protobuf::v1::Track* release_track();
  ::atakmap::commoncommo::protobuf::v1::Track* mutable_track();
  void set_allocated_track(::atakmap::commoncommo::protobuf::v1::Track* track);
  private:
  const ::atakmap::commoncommo::protobuf::v1::Track& _internal_track() const;
  ::atakmap::commoncommo::protobuf::v1::Track* _internal_mutable_track();
  public:
  void unsafe_arena_set_allocated_track(
      ::atakmap::commoncommo::protobuf::v1::Track* track);
  ::atakmap::commoncommo::protobuf::v1::Track* unsafe_arena_release_track();

  // @@protoc_insertion_point(class_scope:atakmap.commoncommo.protobuf.v1.Detail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xmldetail_;
  ::atakmap::commoncommo::protobuf::v1::Contact* contact_;
  ::atakmap::commoncommo::protobuf::v1::Group* group_;
  ::atakmap::commoncommo::protobuf::v1::PrecisionLocation* precisionlocation_;
  ::atakmap::commoncommo::protobuf::v1::Status* status_;
  ::atakmap::commoncommo::protobuf::v1::Takv* takv_;
  ::atakmap::commoncommo::protobuf::v1::Track* track_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_detail_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Detail

// string xmlDetail = 1;
inline void Detail::clear_xmldetail() {
  xmldetail_.ClearToEmpty();
}
inline const std::string& Detail::xmldetail() const {
  // @@protoc_insertion_point(field_get:atakmap.commoncommo.protobuf.v1.Detail.xmlDetail)
  return _internal_xmldetail();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Detail::set_xmldetail(ArgT0&& arg0, ArgT... args) {
 
 xmldetail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:atakmap.commoncommo.protobuf.v1.Detail.xmlDetail)
}
inline std::string* Detail::mutable_xmldetail() {
  std::string* _s = _internal_mutable_xmldetail();
  // @@protoc_insertion_point(field_mutable:atakmap.commoncommo.protobuf.v1.Detail.xmlDetail)
  return _s;
}
inline const std::string& Detail::_internal_xmldetail() const {
  return xmldetail_.Get();
}
inline void Detail::_internal_set_xmldetail(const std::string& value) {
  
  xmldetail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Detail::_internal_mutable_xmldetail() {
  
  return xmldetail_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Detail::release_xmldetail() {
  // @@protoc_insertion_point(field_release:atakmap.commoncommo.protobuf.v1.Detail.xmlDetail)
  return xmldetail_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Detail::set_allocated_xmldetail(std::string* xmldetail) {
  if (xmldetail != nullptr) {
    
  } else {
    
  }
  xmldetail_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xmldetail,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:atakmap.commoncommo.protobuf.v1.Detail.xmlDetail)
}

// .atakmap.commoncommo.protobuf.v1.Contact contact = 2;
inline bool Detail::_internal_has_contact() const {
  return this != internal_default_instance() && contact_ != nullptr;
}
inline bool Detail::has_contact() const {
  return _internal_has_contact();
}
inline const ::atakmap::commoncommo::protobuf::v1::Contact& Detail::_internal_contact() const {
  const ::atakmap::commoncommo::protobuf::v1::Contact* p = contact_;
  return p != nullptr ? *p : reinterpret_cast<const ::atakmap::commoncommo::protobuf::v1::Contact&>(
      ::atakmap::commoncommo::protobuf::v1::_Contact_default_instance_);
}
inline const ::atakmap::commoncommo::protobuf::v1::Contact& Detail::contact() const {
  // @@protoc_insertion_point(field_get:atakmap.commoncommo.protobuf.v1.Detail.contact)
  return _internal_contact();
}
inline void Detail::unsafe_arena_set_allocated_contact(
    ::atakmap::commoncommo::protobuf::v1::Contact* contact) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contact_);
  }
  contact_ = contact;
  if (contact) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atakmap.commoncommo.protobuf.v1.Detail.contact)
}
inline ::atakmap::commoncommo::protobuf::v1::Contact* Detail::release_contact() {
  
  ::atakmap::commoncommo::protobuf::v1::Contact* temp = contact_;
  contact_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::atakmap::commoncommo::protobuf::v1::Contact* Detail::unsafe_arena_release_contact() {
  // @@protoc_insertion_point(field_release:atakmap.commoncommo.protobuf.v1.Detail.contact)
  
  ::atakmap::commoncommo::protobuf::v1::Contact* temp = contact_;
  contact_ = nullptr;
  return temp;
}
inline ::atakmap::commoncommo::protobuf::v1::Contact* Detail::_internal_mutable_contact() {
  
  if (contact_ == nullptr) {
    auto* p = CreateMaybeMessage<::atakmap::commoncommo::protobuf::v1::Contact>(GetArenaForAllocation());
    contact_ = p;
  }
  return contact_;
}
inline ::atakmap::commoncommo::protobuf::v1::Contact* Detail::mutable_contact() {
  ::atakmap::commoncommo::protobuf::v1::Contact* _msg = _internal_mutable_contact();
  // @@protoc_insertion_point(field_mutable:atakmap.commoncommo.protobuf.v1.Detail.contact)
  return _msg;
}
inline void Detail::set_allocated_contact(::atakmap::commoncommo::protobuf::v1::Contact* contact) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(contact_);
  }
  if (contact) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contact));
    if (message_arena != submessage_arena) {
      contact = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contact, submessage_arena);
    }
    
  } else {
    
  }
  contact_ = contact;
  // @@protoc_insertion_point(field_set_allocated:atakmap.commoncommo.protobuf.v1.Detail.contact)
}

// .atakmap.commoncommo.protobuf.v1.Group group = 3;
inline bool Detail::_internal_has_group() const {
  return this != internal_default_instance() && group_ != nullptr;
}
inline bool Detail::has_group() const {
  return _internal_has_group();
}
inline const ::atakmap::commoncommo::protobuf::v1::Group& Detail::_internal_group() const {
  const ::atakmap::commoncommo::protobuf::v1::Group* p = group_;
  return p != nullptr ? *p : reinterpret_cast<const ::atakmap::commoncommo::protobuf::v1::Group&>(
      ::atakmap::commoncommo::protobuf::v1::_Group_default_instance_);
}
inline const ::atakmap::commoncommo::protobuf::v1::Group& Detail::group() const {
  // @@protoc_insertion_point(field_get:atakmap.commoncommo.protobuf.v1.Detail.group)
  return _internal_group();
}
inline void Detail::unsafe_arena_set_allocated_group(
    ::atakmap::commoncommo::protobuf::v1::Group* group) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_);
  }
  group_ = group;
  if (group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atakmap.commoncommo.protobuf.v1.Detail.group)
}
inline ::atakmap::commoncommo::protobuf::v1::Group* Detail::release_group() {
  
  ::atakmap::commoncommo::protobuf::v1::Group* temp = group_;
  group_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::atakmap::commoncommo::protobuf::v1::Group* Detail::unsafe_arena_release_group() {
  // @@protoc_insertion_point(field_release:atakmap.commoncommo.protobuf.v1.Detail.group)
  
  ::atakmap::commoncommo::protobuf::v1::Group* temp = group_;
  group_ = nullptr;
  return temp;
}
inline ::atakmap::commoncommo::protobuf::v1::Group* Detail::_internal_mutable_group() {
  
  if (group_ == nullptr) {
    auto* p = CreateMaybeMessage<::atakmap::commoncommo::protobuf::v1::Group>(GetArenaForAllocation());
    group_ = p;
  }
  return group_;
}
inline ::atakmap::commoncommo::protobuf::v1::Group* Detail::mutable_group() {
  ::atakmap::commoncommo::protobuf::v1::Group* _msg = _internal_mutable_group();
  // @@protoc_insertion_point(field_mutable:atakmap.commoncommo.protobuf.v1.Detail.group)
  return _msg;
}
inline void Detail::set_allocated_group(::atakmap::commoncommo::protobuf::v1::Group* group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_);
  }
  if (group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group));
    if (message_arena != submessage_arena) {
      group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group, submessage_arena);
    }
    
  } else {
    
  }
  group_ = group;
  // @@protoc_insertion_point(field_set_allocated:atakmap.commoncommo.protobuf.v1.Detail.group)
}

// .atakmap.commoncommo.protobuf.v1.PrecisionLocation precisionLocation = 4;
inline bool Detail::_internal_has_precisionlocation() const {
  return this != internal_default_instance() && precisionlocation_ != nullptr;
}
inline bool Detail::has_precisionlocation() const {
  return _internal_has_precisionlocation();
}
inline const ::atakmap::commoncommo::protobuf::v1::PrecisionLocation& Detail::_internal_precisionlocation() const {
  const ::atakmap::commoncommo::protobuf::v1::PrecisionLocation* p = precisionlocation_;
  return p != nullptr ? *p : reinterpret_cast<const ::atakmap::commoncommo::protobuf::v1::PrecisionLocation&>(
      ::atakmap::commoncommo::protobuf::v1::_PrecisionLocation_default_instance_);
}
inline const ::atakmap::commoncommo::protobuf::v1::PrecisionLocation& Detail::precisionlocation() const {
  // @@protoc_insertion_point(field_get:atakmap.commoncommo.protobuf.v1.Detail.precisionLocation)
  return _internal_precisionlocation();
}
inline void Detail::unsafe_arena_set_allocated_precisionlocation(
    ::atakmap::commoncommo::protobuf::v1::PrecisionLocation* precisionlocation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(precisionlocation_);
  }
  precisionlocation_ = precisionlocation;
  if (precisionlocation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atakmap.commoncommo.protobuf.v1.Detail.precisionLocation)
}
inline ::atakmap::commoncommo::protobuf::v1::PrecisionLocation* Detail::release_precisionlocation() {
  
  ::atakmap::commoncommo::protobuf::v1::PrecisionLocation* temp = precisionlocation_;
  precisionlocation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::atakmap::commoncommo::protobuf::v1::PrecisionLocation* Detail::unsafe_arena_release_precisionlocation() {
  // @@protoc_insertion_point(field_release:atakmap.commoncommo.protobuf.v1.Detail.precisionLocation)
  
  ::atakmap::commoncommo::protobuf::v1::PrecisionLocation* temp = precisionlocation_;
  precisionlocation_ = nullptr;
  return temp;
}
inline ::atakmap::commoncommo::protobuf::v1::PrecisionLocation* Detail::_internal_mutable_precisionlocation() {
  
  if (precisionlocation_ == nullptr) {
    auto* p = CreateMaybeMessage<::atakmap::commoncommo::protobuf::v1::PrecisionLocation>(GetArenaForAllocation());
    precisionlocation_ = p;
  }
  return precisionlocation_;
}
inline ::atakmap::commoncommo::protobuf::v1::PrecisionLocation* Detail::mutable_precisionlocation() {
  ::atakmap::commoncommo::protobuf::v1::PrecisionLocation* _msg = _internal_mutable_precisionlocation();
  // @@protoc_insertion_point(field_mutable:atakmap.commoncommo.protobuf.v1.Detail.precisionLocation)
  return _msg;
}
inline void Detail::set_allocated_precisionlocation(::atakmap::commoncommo::protobuf::v1::PrecisionLocation* precisionlocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(precisionlocation_);
  }
  if (precisionlocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(precisionlocation));
    if (message_arena != submessage_arena) {
      precisionlocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, precisionlocation, submessage_arena);
    }
    
  } else {
    
  }
  precisionlocation_ = precisionlocation;
  // @@protoc_insertion_point(field_set_allocated:atakmap.commoncommo.protobuf.v1.Detail.precisionLocation)
}

// .atakmap.commoncommo.protobuf.v1.Status status = 5;
inline bool Detail::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Detail::has_status() const {
  return _internal_has_status();
}
inline const ::atakmap::commoncommo::protobuf::v1::Status& Detail::_internal_status() const {
  const ::atakmap::commoncommo::protobuf::v1::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::atakmap::commoncommo::protobuf::v1::Status&>(
      ::atakmap::commoncommo::protobuf::v1::_Status_default_instance_);
}
inline const ::atakmap::commoncommo::protobuf::v1::Status& Detail::status() const {
  // @@protoc_insertion_point(field_get:atakmap.commoncommo.protobuf.v1.Detail.status)
  return _internal_status();
}
inline void Detail::unsafe_arena_set_allocated_status(
    ::atakmap::commoncommo::protobuf::v1::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atakmap.commoncommo.protobuf.v1.Detail.status)
}
inline ::atakmap::commoncommo::protobuf::v1::Status* Detail::release_status() {
  
  ::atakmap::commoncommo::protobuf::v1::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::atakmap::commoncommo::protobuf::v1::Status* Detail::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:atakmap.commoncommo.protobuf.v1.Detail.status)
  
  ::atakmap::commoncommo::protobuf::v1::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::atakmap::commoncommo::protobuf::v1::Status* Detail::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::atakmap::commoncommo::protobuf::v1::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::atakmap::commoncommo::protobuf::v1::Status* Detail::mutable_status() {
  ::atakmap::commoncommo::protobuf::v1::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:atakmap.commoncommo.protobuf.v1.Detail.status)
  return _msg;
}
inline void Detail::set_allocated_status(::atakmap::commoncommo::protobuf::v1::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:atakmap.commoncommo.protobuf.v1.Detail.status)
}

// .atakmap.commoncommo.protobuf.v1.Takv takv = 6;
inline bool Detail::_internal_has_takv() const {
  return this != internal_default_instance() && takv_ != nullptr;
}
inline bool Detail::has_takv() const {
  return _internal_has_takv();
}
inline const ::atakmap::commoncommo::protobuf::v1::Takv& Detail::_internal_takv() const {
  const ::atakmap::commoncommo::protobuf::v1::Takv* p = takv_;
  return p != nullptr ? *p : reinterpret_cast<const ::atakmap::commoncommo::protobuf::v1::Takv&>(
      ::atakmap::commoncommo::protobuf::v1::_Takv_default_instance_);
}
inline const ::atakmap::commoncommo::protobuf::v1::Takv& Detail::takv() const {
  // @@protoc_insertion_point(field_get:atakmap.commoncommo.protobuf.v1.Detail.takv)
  return _internal_takv();
}
inline void Detail::unsafe_arena_set_allocated_takv(
    ::atakmap::commoncommo::protobuf::v1::Takv* takv) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(takv_);
  }
  takv_ = takv;
  if (takv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atakmap.commoncommo.protobuf.v1.Detail.takv)
}
inline ::atakmap::commoncommo::protobuf::v1::Takv* Detail::release_takv() {
  
  ::atakmap::commoncommo::protobuf::v1::Takv* temp = takv_;
  takv_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::atakmap::commoncommo::protobuf::v1::Takv* Detail::unsafe_arena_release_takv() {
  // @@protoc_insertion_point(field_release:atakmap.commoncommo.protobuf.v1.Detail.takv)
  
  ::atakmap::commoncommo::protobuf::v1::Takv* temp = takv_;
  takv_ = nullptr;
  return temp;
}
inline ::atakmap::commoncommo::protobuf::v1::Takv* Detail::_internal_mutable_takv() {
  
  if (takv_ == nullptr) {
    auto* p = CreateMaybeMessage<::atakmap::commoncommo::protobuf::v1::Takv>(GetArenaForAllocation());
    takv_ = p;
  }
  return takv_;
}
inline ::atakmap::commoncommo::protobuf::v1::Takv* Detail::mutable_takv() {
  ::atakmap::commoncommo::protobuf::v1::Takv* _msg = _internal_mutable_takv();
  // @@protoc_insertion_point(field_mutable:atakmap.commoncommo.protobuf.v1.Detail.takv)
  return _msg;
}
inline void Detail::set_allocated_takv(::atakmap::commoncommo::protobuf::v1::Takv* takv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(takv_);
  }
  if (takv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(takv));
    if (message_arena != submessage_arena) {
      takv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, takv, submessage_arena);
    }
    
  } else {
    
  }
  takv_ = takv;
  // @@protoc_insertion_point(field_set_allocated:atakmap.commoncommo.protobuf.v1.Detail.takv)
}

// .atakmap.commoncommo.protobuf.v1.Track track = 7;
inline bool Detail::_internal_has_track() const {
  return this != internal_default_instance() && track_ != nullptr;
}
inline bool Detail::has_track() const {
  return _internal_has_track();
}
inline const ::atakmap::commoncommo::protobuf::v1::Track& Detail::_internal_track() const {
  const ::atakmap::commoncommo::protobuf::v1::Track* p = track_;
  return p != nullptr ? *p : reinterpret_cast<const ::atakmap::commoncommo::protobuf::v1::Track&>(
      ::atakmap::commoncommo::protobuf::v1::_Track_default_instance_);
}
inline const ::atakmap::commoncommo::protobuf::v1::Track& Detail::track() const {
  // @@protoc_insertion_point(field_get:atakmap.commoncommo.protobuf.v1.Detail.track)
  return _internal_track();
}
inline void Detail::unsafe_arena_set_allocated_track(
    ::atakmap::commoncommo::protobuf::v1::Track* track) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(track_);
  }
  track_ = track;
  if (track) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:atakmap.commoncommo.protobuf.v1.Detail.track)
}
inline ::atakmap::commoncommo::protobuf::v1::Track* Detail::release_track() {
  
  ::atakmap::commoncommo::protobuf::v1::Track* temp = track_;
  track_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::atakmap::commoncommo::protobuf::v1::Track* Detail::unsafe_arena_release_track() {
  // @@protoc_insertion_point(field_release:atakmap.commoncommo.protobuf.v1.Detail.track)
  
  ::atakmap::commoncommo::protobuf::v1::Track* temp = track_;
  track_ = nullptr;
  return temp;
}
inline ::atakmap::commoncommo::protobuf::v1::Track* Detail::_internal_mutable_track() {
  
  if (track_ == nullptr) {
    auto* p = CreateMaybeMessage<::atakmap::commoncommo::protobuf::v1::Track>(GetArenaForAllocation());
    track_ = p;
  }
  return track_;
}
inline ::atakmap::commoncommo::protobuf::v1::Track* Detail::mutable_track() {
  ::atakmap::commoncommo::protobuf::v1::Track* _msg = _internal_mutable_track();
  // @@protoc_insertion_point(field_mutable:atakmap.commoncommo.protobuf.v1.Detail.track)
  return _msg;
}
inline void Detail::set_allocated_track(::atakmap::commoncommo::protobuf::v1::Track* track) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(track_);
  }
  if (track) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(track));
    if (message_arena != submessage_arena) {
      track = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, track, submessage_arena);
    }
    
  } else {
    
  }
  track_ = track;
  // @@protoc_insertion_point(field_set_allocated:atakmap.commoncommo.protobuf.v1.Detail.track)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace protobuf
}  // namespace commoncommo
}  // namespace atakmap

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_detail_2eproto
