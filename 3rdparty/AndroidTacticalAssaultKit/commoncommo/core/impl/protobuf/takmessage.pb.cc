// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: takmessage.proto

#include "takmessage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace atakmap {
namespace commoncommo {
namespace protobuf {
namespace v1 {
constexpr TakMessage::TakMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : takcontrol_(nullptr)
  , cotevent_(nullptr){}
struct TakMessageDefaultTypeInternal {
  constexpr TakMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TakMessageDefaultTypeInternal() {}
  union {
    TakMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TakMessageDefaultTypeInternal _TakMessage_default_instance_;
}  // namespace v1
}  // namespace protobuf
}  // namespace commoncommo
}  // namespace atakmap
namespace atakmap {
namespace commoncommo {
namespace protobuf {
namespace v1 {

// ===================================================================

class TakMessage::_Internal {
 public:
  static const ::atakmap::commoncommo::protobuf::v1::TakControl& takcontrol(const TakMessage* msg);
  static const ::atakmap::commoncommo::protobuf::v1::CotEvent& cotevent(const TakMessage* msg);
};

const ::atakmap::commoncommo::protobuf::v1::TakControl&
TakMessage::_Internal::takcontrol(const TakMessage* msg) {
  return *msg->takcontrol_;
}
const ::atakmap::commoncommo::protobuf::v1::CotEvent&
TakMessage::_Internal::cotevent(const TakMessage* msg) {
  return *msg->cotevent_;
}
void TakMessage::clear_takcontrol() {
  if (GetArenaForAllocation() == nullptr && takcontrol_ != nullptr) {
    delete takcontrol_;
  }
  takcontrol_ = nullptr;
}
void TakMessage::clear_cotevent() {
  if (GetArenaForAllocation() == nullptr && cotevent_ != nullptr) {
    delete cotevent_;
  }
  cotevent_ = nullptr;
}
TakMessage::TakMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atakmap.commoncommo.protobuf.v1.TakMessage)
}
TakMessage::TakMessage(const TakMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_takcontrol()) {
    takcontrol_ = new ::atakmap::commoncommo::protobuf::v1::TakControl(*from.takcontrol_);
  } else {
    takcontrol_ = nullptr;
  }
  if (from._internal_has_cotevent()) {
    cotevent_ = new ::atakmap::commoncommo::protobuf::v1::CotEvent(*from.cotevent_);
  } else {
    cotevent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:atakmap.commoncommo.protobuf.v1.TakMessage)
}

inline void TakMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&takcontrol_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cotevent_) -
    reinterpret_cast<char*>(&takcontrol_)) + sizeof(cotevent_));
}

TakMessage::~TakMessage() {
  // @@protoc_insertion_point(destructor:atakmap.commoncommo.protobuf.v1.TakMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void TakMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete takcontrol_;
  if (this != internal_default_instance()) delete cotevent_;
}

void TakMessage::ArenaDtor(void* object) {
  TakMessage* _this = reinterpret_cast< TakMessage* >(object);
  (void)_this;
}
void TakMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TakMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TakMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:atakmap.commoncommo.protobuf.v1.TakMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && takcontrol_ != nullptr) {
    delete takcontrol_;
  }
  takcontrol_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cotevent_ != nullptr) {
    delete cotevent_;
  }
  cotevent_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* TakMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .atakmap.commoncommo.protobuf.v1.TakControl takControl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_takcontrol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atakmap.commoncommo.protobuf.v1.CotEvent cotEvent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cotevent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TakMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atakmap.commoncommo.protobuf.v1.TakMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .atakmap.commoncommo.protobuf.v1.TakControl takControl = 1;
  if (this->_internal_has_takcontrol()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::takcontrol(this), target, stream);
  }

  // .atakmap.commoncommo.protobuf.v1.CotEvent cotEvent = 2;
  if (this->_internal_has_cotevent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cotevent(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atakmap.commoncommo.protobuf.v1.TakMessage)
  return target;
}

size_t TakMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atakmap.commoncommo.protobuf.v1.TakMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .atakmap.commoncommo.protobuf.v1.TakControl takControl = 1;
  if (this->_internal_has_takcontrol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *takcontrol_);
  }

  // .atakmap.commoncommo.protobuf.v1.CotEvent cotEvent = 2;
  if (this->_internal_has_cotevent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cotevent_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TakMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TakMessage*>(
      &from));
}

void TakMessage::MergeFrom(const TakMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atakmap.commoncommo.protobuf.v1.TakMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_takcontrol()) {
    _internal_mutable_takcontrol()->::atakmap::commoncommo::protobuf::v1::TakControl::MergeFrom(from._internal_takcontrol());
  }
  if (from._internal_has_cotevent()) {
    _internal_mutable_cotevent()->::atakmap::commoncommo::protobuf::v1::CotEvent::MergeFrom(from._internal_cotevent());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TakMessage::CopyFrom(const TakMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atakmap.commoncommo.protobuf.v1.TakMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakMessage::IsInitialized() const {
  return true;
}

void TakMessage::InternalSwap(TakMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TakMessage, cotevent_)
      + sizeof(TakMessage::cotevent_)
      - PROTOBUF_FIELD_OFFSET(TakMessage, takcontrol_)>(
          reinterpret_cast<char*>(&takcontrol_),
          reinterpret_cast<char*>(&other->takcontrol_));
}

std::string TakMessage::GetTypeName() const {
  return "atakmap.commoncommo.protobuf.v1.TakMessage";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace protobuf
}  // namespace commoncommo
}  // namespace atakmap
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::atakmap::commoncommo::protobuf::v1::TakMessage* Arena::CreateMaybeMessage< ::atakmap::commoncommo::protobuf::v1::TakMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atakmap::commoncommo::protobuf::v1::TakMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
