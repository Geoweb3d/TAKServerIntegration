// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: detail.proto

#include "detail.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace atakmap {
namespace commoncommo {
namespace protobuf {
namespace v1 {
constexpr Detail::Detail(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : xmldetail_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , contact_(nullptr)
  , group_(nullptr)
  , precisionlocation_(nullptr)
  , status_(nullptr)
  , takv_(nullptr)
  , track_(nullptr){}
struct DetailDefaultTypeInternal {
  constexpr DetailDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DetailDefaultTypeInternal() {}
  union {
    Detail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DetailDefaultTypeInternal _Detail_default_instance_;
}  // namespace v1
}  // namespace protobuf
}  // namespace commoncommo
}  // namespace atakmap
namespace atakmap {
namespace commoncommo {
namespace protobuf {
namespace v1 {

// ===================================================================

class Detail::_Internal {
 public:
  static const ::atakmap::commoncommo::protobuf::v1::Contact& contact(const Detail* msg);
  static const ::atakmap::commoncommo::protobuf::v1::Group& group(const Detail* msg);
  static const ::atakmap::commoncommo::protobuf::v1::PrecisionLocation& precisionlocation(const Detail* msg);
  static const ::atakmap::commoncommo::protobuf::v1::Status& status(const Detail* msg);
  static const ::atakmap::commoncommo::protobuf::v1::Takv& takv(const Detail* msg);
  static const ::atakmap::commoncommo::protobuf::v1::Track& track(const Detail* msg);
};

const ::atakmap::commoncommo::protobuf::v1::Contact&
Detail::_Internal::contact(const Detail* msg) {
  return *msg->contact_;
}
const ::atakmap::commoncommo::protobuf::v1::Group&
Detail::_Internal::group(const Detail* msg) {
  return *msg->group_;
}
const ::atakmap::commoncommo::protobuf::v1::PrecisionLocation&
Detail::_Internal::precisionlocation(const Detail* msg) {
  return *msg->precisionlocation_;
}
const ::atakmap::commoncommo::protobuf::v1::Status&
Detail::_Internal::status(const Detail* msg) {
  return *msg->status_;
}
const ::atakmap::commoncommo::protobuf::v1::Takv&
Detail::_Internal::takv(const Detail* msg) {
  return *msg->takv_;
}
const ::atakmap::commoncommo::protobuf::v1::Track&
Detail::_Internal::track(const Detail* msg) {
  return *msg->track_;
}
void Detail::clear_contact() {
  if (GetArenaForAllocation() == nullptr && contact_ != nullptr) {
    delete contact_;
  }
  contact_ = nullptr;
}
void Detail::clear_group() {
  if (GetArenaForAllocation() == nullptr && group_ != nullptr) {
    delete group_;
  }
  group_ = nullptr;
}
void Detail::clear_precisionlocation() {
  if (GetArenaForAllocation() == nullptr && precisionlocation_ != nullptr) {
    delete precisionlocation_;
  }
  precisionlocation_ = nullptr;
}
void Detail::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void Detail::clear_takv() {
  if (GetArenaForAllocation() == nullptr && takv_ != nullptr) {
    delete takv_;
  }
  takv_ = nullptr;
}
void Detail::clear_track() {
  if (GetArenaForAllocation() == nullptr && track_ != nullptr) {
    delete track_;
  }
  track_ = nullptr;
}
Detail::Detail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:atakmap.commoncommo.protobuf.v1.Detail)
}
Detail::Detail(const Detail& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  xmldetail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_xmldetail().empty()) {
    xmldetail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_xmldetail(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_contact()) {
    contact_ = new ::atakmap::commoncommo::protobuf::v1::Contact(*from.contact_);
  } else {
    contact_ = nullptr;
  }
  if (from._internal_has_group()) {
    group_ = new ::atakmap::commoncommo::protobuf::v1::Group(*from.group_);
  } else {
    group_ = nullptr;
  }
  if (from._internal_has_precisionlocation()) {
    precisionlocation_ = new ::atakmap::commoncommo::protobuf::v1::PrecisionLocation(*from.precisionlocation_);
  } else {
    precisionlocation_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::atakmap::commoncommo::protobuf::v1::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_takv()) {
    takv_ = new ::atakmap::commoncommo::protobuf::v1::Takv(*from.takv_);
  } else {
    takv_ = nullptr;
  }
  if (from._internal_has_track()) {
    track_ = new ::atakmap::commoncommo::protobuf::v1::Track(*from.track_);
  } else {
    track_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:atakmap.commoncommo.protobuf.v1.Detail)
}

inline void Detail::SharedCtor() {
xmldetail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&contact_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&track_) -
    reinterpret_cast<char*>(&contact_)) + sizeof(track_));
}

Detail::~Detail() {
  // @@protoc_insertion_point(destructor:atakmap.commoncommo.protobuf.v1.Detail)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Detail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  xmldetail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete contact_;
  if (this != internal_default_instance()) delete group_;
  if (this != internal_default_instance()) delete precisionlocation_;
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete takv_;
  if (this != internal_default_instance()) delete track_;
}

void Detail::ArenaDtor(void* object) {
  Detail* _this = reinterpret_cast< Detail* >(object);
  (void)_this;
}
void Detail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Detail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Detail::Clear() {
// @@protoc_insertion_point(message_clear_start:atakmap.commoncommo.protobuf.v1.Detail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xmldetail_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && contact_ != nullptr) {
    delete contact_;
  }
  contact_ = nullptr;
  if (GetArenaForAllocation() == nullptr && group_ != nullptr) {
    delete group_;
  }
  group_ = nullptr;
  if (GetArenaForAllocation() == nullptr && precisionlocation_ != nullptr) {
    delete precisionlocation_;
  }
  precisionlocation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && takv_ != nullptr) {
    delete takv_;
  }
  takv_ = nullptr;
  if (GetArenaForAllocation() == nullptr && track_ != nullptr) {
    delete track_;
  }
  track_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* Detail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string xmlDetail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_xmldetail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atakmap.commoncommo.protobuf.v1.Contact contact = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_contact(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atakmap.commoncommo.protobuf.v1.Group group = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_group(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atakmap.commoncommo.protobuf.v1.PrecisionLocation precisionLocation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_precisionlocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atakmap.commoncommo.protobuf.v1.Status status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atakmap.commoncommo.protobuf.v1.Takv takv = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_takv(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .atakmap.commoncommo.protobuf.v1.Track track = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_track(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Detail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:atakmap.commoncommo.protobuf.v1.Detail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string xmlDetail = 1;
  if (!this->_internal_xmldetail().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_xmldetail().data(), static_cast<int>(this->_internal_xmldetail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "atakmap.commoncommo.protobuf.v1.Detail.xmlDetail");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_xmldetail(), target);
  }

  // .atakmap.commoncommo.protobuf.v1.Contact contact = 2;
  if (this->_internal_has_contact()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::contact(this), target, stream);
  }

  // .atakmap.commoncommo.protobuf.v1.Group group = 3;
  if (this->_internal_has_group()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::group(this), target, stream);
  }

  // .atakmap.commoncommo.protobuf.v1.PrecisionLocation precisionLocation = 4;
  if (this->_internal_has_precisionlocation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::precisionlocation(this), target, stream);
  }

  // .atakmap.commoncommo.protobuf.v1.Status status = 5;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::status(this), target, stream);
  }

  // .atakmap.commoncommo.protobuf.v1.Takv takv = 6;
  if (this->_internal_has_takv()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::takv(this), target, stream);
  }

  // .atakmap.commoncommo.protobuf.v1.Track track = 7;
  if (this->_internal_has_track()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::track(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atakmap.commoncommo.protobuf.v1.Detail)
  return target;
}

size_t Detail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atakmap.commoncommo.protobuf.v1.Detail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string xmlDetail = 1;
  if (!this->_internal_xmldetail().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_xmldetail());
  }

  // .atakmap.commoncommo.protobuf.v1.Contact contact = 2;
  if (this->_internal_has_contact()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *contact_);
  }

  // .atakmap.commoncommo.protobuf.v1.Group group = 3;
  if (this->_internal_has_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_);
  }

  // .atakmap.commoncommo.protobuf.v1.PrecisionLocation precisionLocation = 4;
  if (this->_internal_has_precisionlocation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *precisionlocation_);
  }

  // .atakmap.commoncommo.protobuf.v1.Status status = 5;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .atakmap.commoncommo.protobuf.v1.Takv takv = 6;
  if (this->_internal_has_takv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *takv_);
  }

  // .atakmap.commoncommo.protobuf.v1.Track track = 7;
  if (this->_internal_has_track()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *track_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Detail::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Detail*>(
      &from));
}

void Detail::MergeFrom(const Detail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atakmap.commoncommo.protobuf.v1.Detail)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_xmldetail().empty()) {
    _internal_set_xmldetail(from._internal_xmldetail());
  }
  if (from._internal_has_contact()) {
    _internal_mutable_contact()->::atakmap::commoncommo::protobuf::v1::Contact::MergeFrom(from._internal_contact());
  }
  if (from._internal_has_group()) {
    _internal_mutable_group()->::atakmap::commoncommo::protobuf::v1::Group::MergeFrom(from._internal_group());
  }
  if (from._internal_has_precisionlocation()) {
    _internal_mutable_precisionlocation()->::atakmap::commoncommo::protobuf::v1::PrecisionLocation::MergeFrom(from._internal_precisionlocation());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::atakmap::commoncommo::protobuf::v1::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_has_takv()) {
    _internal_mutable_takv()->::atakmap::commoncommo::protobuf::v1::Takv::MergeFrom(from._internal_takv());
  }
  if (from._internal_has_track()) {
    _internal_mutable_track()->::atakmap::commoncommo::protobuf::v1::Track::MergeFrom(from._internal_track());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Detail::CopyFrom(const Detail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atakmap.commoncommo.protobuf.v1.Detail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detail::IsInitialized() const {
  return true;
}

void Detail::InternalSwap(Detail* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &xmldetail_, GetArenaForAllocation(),
      &other->xmldetail_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Detail, track_)
      + sizeof(Detail::track_)
      - PROTOBUF_FIELD_OFFSET(Detail, contact_)>(
          reinterpret_cast<char*>(&contact_),
          reinterpret_cast<char*>(&other->contact_));
}

std::string Detail::GetTypeName() const {
  return "atakmap.commoncommo.protobuf.v1.Detail";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace protobuf
}  // namespace commoncommo
}  // namespace atakmap
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::atakmap::commoncommo::protobuf::v1::Detail* Arena::CreateMaybeMessage< ::atakmap::commoncommo::protobuf::v1::Detail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::atakmap::commoncommo::protobuf::v1::Detail >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
